var searchIndex = {};
searchIndex["ndarray"] = {"doc":"The `ndarray` crate provides an N-dimensional container for general elements and for numerics.","items":[[3,"Axis","ndarray","An axis index.",null,null],[12,"0","","",0,null],[3,"Axes","","An iterator over the length and stride of each axis of an array.",null,null],[3,"AxisDescription","","Description of the axis, its length and its stride.",null,null],[12,"0","","",1,null],[12,"1","","",1,null],[12,"2","","",1,null],[3,"Dim","","Dimension description.",null,null],[3,"Indices","","An iterator over the indexes of an array shape.",null,null],[3,"ShapeError","","An error related to array shape or layout.",null,null],[3,"Si","","A slice, a description of a range of an array axis.",null,null],[12,"0","","",2,null],[12,"1","","",2,null],[12,"2","","",2,null],[3,"InnerIter","","An iterator that traverses over all dimensions but the innermost, and yields each inner row.",null,null],[3,"InnerIterMut","","An iterator that traverses over all dimensions but the innermost, and yields each inner row (mutable).",null,null],[3,"AxisIter","","An iterator that traverses over an axis and and yields each subview.",null,null],[3,"AxisIterMut","","An iterator that traverses over an axis and and yields each subview (mutable)",null,null],[3,"AxisChunksIter","","An iterator that traverses over the specified axis and yields views of the specified size on this axis.",null,null],[3,"AxisChunksIterMut","","An iterator that traverses over the specified axis and yields mutable views of the specified size on this axis.",null,null],[3,"WholeChunks","","Whole chunks producer and iterable.",null,null],[3,"WholeChunksIter","","Whole chunks iterator.",null,null],[3,"WholeChunksMut","","Whole chunks producer and iterable.",null,null],[3,"WholeChunksIterMut","","Whole chunks iterator.",null,null],[3,"Zip","","Lock step function application across several arrays or other producers.",null,null],[3,"ArrayBase","","An N-dimensional array.",null,null],[3,"ViewRepr","","Array view’s representation.",null,null],[3,"Iter","","An iterator over the elements of an array.",null,null],[3,"IterMut","","An iterator over the elements of an array (mutable).",null,null],[3,"IndexedIter","","An iterator over the indexes and elements of an array.",null,null],[3,"IndexedIterMut","","An iterator over the indexes and elements of an array (mutable).",null,null],[3,"Shape","","A contiguous array shape of n dimensions.",null,null],[3,"StrideShape","","An array shape of n dimensions in c-order, f-order or custom strides.",null,null],[4,"ErrorKind","","Error code for an error related to array shape or layout.",null,null],[13,"IncompatibleShape","","incompatible shape",3,null],[13,"IncompatibleLayout","","incompatible memory layout",3,null],[13,"RangeLimited","","the shape does not fit inside type limits",3,null],[13,"OutOfBounds","","out of bounds indexing",3,null],[13,"Unsupported","","aliasing array elements",3,null],[4,"FoldWhile","","Value controlling the execution of `.fold_while` on `Zip`.",null,null],[13,"Continue","","Continue folding with this value",4,null],[13,"Done","","Fold is complete and will return this value",4,null],[5,"Dim","","Create a new dimension value.",null,null],[5,"indices","","Create an iterator over the array shape `shape`.",null,{"inputs":[{"name":"e"}],"output":{"name":"indices"}}],[5,"indices_of","","Create an iterator over the indices of the passed-in array.",null,{"inputs":[{"name":"arraybase"}],"output":{"name":"indices"}}],[5,"stack","","Stack arrays along the given axis.",null,null],[5,"Ix0","","Create a zero-dimensional index",null,{"inputs":[],"output":{"name":"ix0"}}],[5,"Ix1","","Create a one-dimensional index",null,{"inputs":[{"name":"ix"}],"output":{"name":"ix1"}}],[5,"Ix2","","Create a two-dimensional index",null,{"inputs":[{"name":"ix"},{"name":"ix"}],"output":{"name":"ix2"}}],[5,"Ix3","","Create a three-dimensional index",null,{"inputs":[{"name":"ix"},{"name":"ix"},{"name":"ix"}],"output":{"name":"ix3"}}],[5,"Ix4","","Create a four-dimensional index",null,{"inputs":[{"name":"ix"},{"name":"ix"},{"name":"ix"},{"name":"ix"}],"output":{"name":"ix4"}}],[5,"Ix5","","Create a five-dimensional index",null,{"inputs":[{"name":"ix"},{"name":"ix"},{"name":"ix"},{"name":"ix"},{"name":"ix"}],"output":{"name":"ix5"}}],[5,"Ix6","","Create a six-dimensional index",null,{"inputs":[{"name":"ix"},{"name":"ix"},{"name":"ix"},{"name":"ix"},{"name":"ix"},{"name":"ix"}],"output":{"name":"ix6"}}],[5,"arr0","","Create a zero-dimensional array with the element `x`.",null,{"inputs":[{"name":"a"}],"output":{"name":"array0"}}],[5,"arr1","","Create a one-dimensional array with elements from `xs`.",null,null],[5,"rcarr1","","Create a one-dimensional array with elements from `xs`.",null,null],[5,"aview0","","Create a zero-dimensional array view borrowing `x`.",null,{"inputs":[{"name":"a"}],"output":{"name":"arrayview0"}}],[5,"aview1","","Create a one-dimensional array view with elements borrowing `xs`.",null,null],[5,"aview2","","Create a two-dimensional array view with elements borrowing `xs`.",null,null],[5,"aview_mut1","","Create a one-dimensional read-write array view with elements borrowing `xs`.",null,null],[5,"arr2","","Create a two-dimensional array with elements from `xs`.",null,null],[5,"rcarr2","","Create a two-dimensional array with elements from `xs`.",null,null],[5,"arr3","","Create a three-dimensional array with elements from `xs`.",null,null],[5,"rcarr3","","Create a three-dimensional array with elements from `xs`.",null,null],[11,"index","","",5,null],[11,"index_mut","","",5,null],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":{"name":"bool"}}],[11,"from_iter","","",5,{"inputs":[{"name":"i"}],"output":{"name":"arraybase"}}],[11,"hash","","",5,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"from","","",5,{"inputs":[{"name":"slice"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"arraybase"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"slice"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"arraybase"}],"output":{"name":"self"}}],[11,"default","","",5,{"inputs":[],"output":{"name":"self"}}],[11,"serialize","","",6,{"inputs":[{"name":"self"},{"name":"se"}],"output":{"name":"result"}}],[11,"deserialize","","",6,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",5,{"inputs":[{"name":"self"},{"name":"se"}],"output":{"name":"result"}}],[11,"deserialize","","",5,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",6,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",6,{"inputs":[{"name":"e"}],"output":{"name":"result"}}],[11,"encode","","",5,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",5,{"inputs":[{"name":"e"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"_data_slice","","",7,null],[11,"clone_with_ptr","","",7,null],[11,"_data_slice","","",7,null],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"axis"}],"output":{"name":"ordering"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","Return the index of the axis.",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"axis","","",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"index","","",6,null],[11,"index_mut","","",6,null],[11,"zero","","",6,{"inputs":[],"output":{"name":"self"}}],[11,"is_zero","","",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"index","","",6,null],[11,"index_mut","","",6,null],[11,"zero","","",6,{"inputs":[],"output":{"name":"self"}}],[11,"is_zero","","",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"index","","",6,null],[11,"index_mut","","",6,null],[11,"zero","","",6,{"inputs":[],"output":{"name":"self"}}],[11,"is_zero","","",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"index","","",6,null],[11,"index_mut","","",6,null],[11,"zero","","",6,{"inputs":[],"output":{"name":"self"}}],[11,"is_zero","","",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"index","","",6,null],[11,"index_mut","","",6,null],[11,"zero","","",6,{"inputs":[],"output":{"name":"self"}}],[11,"is_zero","","",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"index","","",6,null],[11,"index_mut","","",6,null],[11,"zero","","",6,{"inputs":[],"output":{"name":"self"}}],[11,"is_zero","","",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"index","","",6,null],[11,"index_mut","","",6,null],[11,"zero","","",6,{"inputs":[],"output":{"name":"self"}}],[11,"is_zero","","",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"dim"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"dim"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"dim"}],"output":{"name":"bool"}}],[11,"default","","",6,{"inputs":[],"output":{"name":"dim"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"add","","",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"add_assign","","",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"add_assign","","",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"add","","",6,{"inputs":[{"name":"self"},{"name":"ix"}],"output":{"name":"self"}}],[11,"add_assign","","",6,{"inputs":[{"name":"self"},{"name":"ix"}],"output":null}],[11,"sub","","",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"sub_assign","","",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"sub_assign","","",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"sub","","",6,{"inputs":[{"name":"self"},{"name":"ix"}],"output":{"name":"self"}}],[11,"sub_assign","","",6,{"inputs":[{"name":"self"},{"name":"ix"}],"output":null}],[11,"mul","","",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"mul_assign","","",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"mul_assign","","",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"mul","","",6,{"inputs":[{"name":"self"},{"name":"ix"}],"output":{"name":"self"}}],[11,"mul_assign","","",6,{"inputs":[{"name":"self"},{"name":"ix"}],"output":null}],[11,"ndim","","",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"slice","","",6,null],[11,"slice_mut","","",6,null],[11,"_fastest_varying_stride_order","","",6,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"into_pattern","","",6,null],[11,"next_for","","",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"try_remove_axis","","",6,null],[11,"ndim","","",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"slice","","",6,null],[11,"slice_mut","","",6,null],[11,"into_pattern","","",6,null],[11,"next_for","","",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"equal","","",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"size","","",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"size_checked","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"default_strides","","",6,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"_fastest_varying_stride_order","","",6,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"min_stride_axis","","",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"axis"}}],[11,"max_stride_axis","","",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"axis"}}],[11,"first_index","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"stride_offset","","Self is an index, return the stride offset",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"isize"}}],[11,"stride_offset_checked","","Return stride offset for this dimension and index.",6,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"try_remove_axis","","",6,null],[11,"ndim","","",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"into_pattern","","",6,null],[11,"slice","","",6,null],[11,"slice_mut","","",6,null],[11,"next_for","","",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"equal","","",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"size","","",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"size_checked","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"last_elem","","",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_last_elem","","",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"default_strides","","",6,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fortran_strides","","",6,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"_fastest_varying_stride_order","","",6,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"min_stride_axis","","",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"axis"}}],[11,"first_index","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"stride_offset","","Self is an index, return the stride offset",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"isize"}}],[11,"stride_offset_checked","","Return stride offset for this dimension and index.",6,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"try_remove_axis","","",6,null],[11,"ndim","","",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"into_pattern","","",6,null],[11,"slice","","",6,null],[11,"slice_mut","","",6,null],[11,"size","","",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next_for","","",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"stride_offset","","Self is an index, return the stride offset",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"isize"}}],[11,"stride_offset_checked","","Return stride offset for this dimension and index.",6,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"_fastest_varying_stride_order","","",6,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"try_remove_axis","","",6,null],[11,"ndim","","",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"into_pattern","","",6,null],[11,"slice","","",6,null],[11,"slice_mut","","",6,null],[11,"try_remove_axis","","",6,null],[11,"ndim","","",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"into_pattern","","",6,null],[11,"slice","","",6,null],[11,"slice_mut","","",6,null],[11,"try_remove_axis","","",6,null],[11,"ndim","","",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"into_pattern","","",6,null],[11,"slice","","",6,null],[11,"slice_mut","","",6,null],[11,"try_remove_axis","","",6,null],[11,"index","","",6,null],[11,"index_mut","","",6,null],[11,"index_checked","","",6,{"inputs":[{"name":"self"},{"name":"ixdyn"},{"name":"ixdyn"}],"output":{"name":"option"}}],[11,"index_unchecked","","",6,{"inputs":[{"name":"self"},{"name":"ixdyn"}],"output":{"name":"isize"}}],[11,"index_checked","","",6,{"inputs":[{"name":"self"},{"name":"ixdyn"},{"name":"ixdyn"}],"output":{"name":"option"}}],[11,"index_unchecked","","",6,{"inputs":[{"name":"self"},{"name":"ixdyn"}],"output":{"name":"isize"}}],[11,"index_checked","","",6,{"inputs":[{"name":"self"},{"name":"ixdyn"},{"name":"ixdyn"}],"output":{"name":"option"}}],[11,"index_unchecked","","",6,{"inputs":[{"name":"self"},{"name":"ixdyn"}],"output":{"name":"isize"}}],[11,"index_checked","","",6,{"inputs":[{"name":"self"},{"name":"ixdyn"},{"name":"ixdyn"}],"output":{"name":"option"}}],[11,"index_unchecked","","",6,{"inputs":[{"name":"self"},{"name":"ixdyn"}],"output":{"name":"isize"}}],[11,"index_checked","","",6,{"inputs":[{"name":"self"},{"name":"ixdyn"},{"name":"ixdyn"}],"output":{"name":"option"}}],[11,"index_unchecked","","",6,{"inputs":[{"name":"self"},{"name":"ixdyn"}],"output":{"name":"isize"}}],[11,"index_checked","","",6,{"inputs":[{"name":"self"},{"name":"ixdyn"},{"name":"ixdyn"}],"output":{"name":"option"}}],[11,"index_unchecked","","",6,{"inputs":[{"name":"self"},{"name":"ixdyn"}],"output":{"name":"isize"}}],[11,"remove_axis","","",6,{"inputs":[{"name":"self"},{"name":"axis"}],"output":{"name":"ix0"}}],[11,"remove_axis","","",6,{"inputs":[{"name":"self"},{"name":"axis"}],"output":{"name":"ix1"}}],[11,"remove_axis","","",6,null],[11,"remove_axis","","",6,null],[11,"remove_axis","","",6,null],[11,"remove_axis","","",6,null],[11,"remove_axis","","",6,{"inputs":[{"name":"self"},{"name":"axis"}],"output":{"name":"self"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"axis","","Return axis",1,{"inputs":[{"name":"self"}],"output":{"name":"axis"}}],[11,"len","","Return length",1,{"inputs":[{"name":"self"}],"output":{"name":"ix"}}],[11,"stride","","Return stride",1,{"inputs":[{"name":"self"}],"output":{"name":"ixs"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"next","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",8,null],[11,"next_back","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"indices"}}],[11,"next","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",9,null],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"into_iter","","",10,null],[11,"into_iter","","",11,null],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"next","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",12,null],[11,"next","","",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",13,null],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"next","","",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",14,null],[11,"fold","","",14,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"acc"}}],[11,"next_back","","",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",14,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",15,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",15,null],[11,"len","","",15,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",16,null],[11,"fold","","",16,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"acc"}}],[11,"next_back","","",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",16,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",17,null],[11,"len","","",17,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",18,null],[11,"len","","",18,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",19,null],[11,"len","","",19,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"split_at","","Split the iterator at index, yielding two disjoint iterators.",20,null],[11,"next","","",20,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",20,null],[11,"next_back","","",20,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",20,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"split_at","","Split the iterator at index, yielding two disjoint iterators.",21,null],[11,"next","","",21,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",21,null],[11,"next_back","","",21,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",21,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"contiguous_stride","","",20,{"inputs":[{"name":"self"}],"output":{"name":"isize"}}],[11,"contiguous_stride","","",21,{"inputs":[{"name":"self"}],"output":{"name":"isize"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"next","","",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",22,null],[11,"next_back","","",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",23,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",23,null],[11,"next_back","","",23,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"si"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"si"}],"output":{"name":"bool"}}],[11,"hash","","",2,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",2,{"inputs":[{"name":"range"}],"output":{"name":"si"}}],[11,"from","","",2,{"inputs":[{"name":"rangefrom"}],"output":{"name":"si"}}],[11,"from","","",2,{"inputs":[{"name":"rangeto"}],"output":{"name":"si"}}],[11,"from","","",2,{"inputs":[{"name":"rangefull"}],"output":{"name":"si"}}],[11,"step","","",2,{"inputs":[{"name":"self"},{"name":"ixs"}],"output":{"name":"self"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"shapeerror"}}],[11,"kind","","Return the `ErrorKind` of this error.",24,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"from_kind","","Create a new `ShapeError`",24,{"inputs":[{"name":"errorkind"}],"output":{"name":"self"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"description","","",24,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","Create a `Shape` from `dimension`, using the default memory layout.",25,{"inputs":[{"name":"d"}],"output":{"name":"shape"}}],[11,"from","","",26,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"into_shape","","",25,{"inputs":[{"name":"self"}],"output":{"name":"shape"}}],[11,"f","","",25,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"set_f","","",25,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"strides","","",25,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"strideshape"}}],[11,"size","","Return the size of the shape in number of elements",25,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"zip"}}],[11,"from","","Create a new `Zip` from the input array or other producer `p`.",27,{"inputs":[{"name":"ip"}],"output":{"name":"self"}}],[11,"size","","Return a the number of element tuples in the Zip",27,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"apply","","Apply a function to all elements of the input arrays, visiting elements in lock step.",27,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"fold_while","","Apply a fold function to all elements of the input arrays, visiting elements in lock step.",27,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"foldwhile"}}],[11,"and","","Include the producer `p` in the Zip.",27,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"zip"}}],[11,"and_broadcast","","Include the producer `p` in the Zip, broadcasting if needed.",27,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"zip"}}],[11,"split","","Split the `Zip` evenly in two.",27,null],[11,"apply","","Apply a function to all elements of the input arrays, visiting elements in lock step.",27,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"fold_while","","Apply a fold function to all elements of the input arrays, visiting elements in lock step.",27,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"foldwhile"}}],[11,"and","","Include the producer `p` in the Zip.",27,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"zip"}}],[11,"and_broadcast","","Include the producer `p` in the Zip, broadcasting if needed.",27,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"zip"}}],[11,"split","","Split the `Zip` evenly in two.",27,null],[11,"apply","","Apply a function to all elements of the input arrays, visiting elements in lock step.",27,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"fold_while","","Apply a fold function to all elements of the input arrays, visiting elements in lock step.",27,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"foldwhile"}}],[11,"and","","Include the producer `p` in the Zip.",27,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"zip"}}],[11,"and_broadcast","","Include the producer `p` in the Zip, broadcasting if needed.",27,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"zip"}}],[11,"split","","Split the `Zip` evenly in two.",27,null],[11,"apply","","Apply a function to all elements of the input arrays, visiting elements in lock step.",27,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"fold_while","","Apply a fold function to all elements of the input arrays, visiting elements in lock step.",27,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"foldwhile"}}],[11,"and","","Include the producer `p` in the Zip.",27,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"zip"}}],[11,"and_broadcast","","Include the producer `p` in the Zip, broadcasting if needed.",27,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"zip"}}],[11,"split","","Split the `Zip` evenly in two.",27,null],[11,"apply","","Apply a function to all elements of the input arrays, visiting elements in lock step.",27,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"fold_while","","Apply a fold function to all elements of the input arrays, visiting elements in lock step.",27,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"foldwhile"}}],[11,"and","","Include the producer `p` in the Zip.",27,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"zip"}}],[11,"and_broadcast","","Include the producer `p` in the Zip, broadcasting if needed.",27,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"zip"}}],[11,"split","","Split the `Zip` evenly in two.",27,null],[11,"apply","","Apply a function to all elements of the input arrays, visiting elements in lock step.",27,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"fold_while","","Apply a fold function to all elements of the input arrays, visiting elements in lock step.",27,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"f"}],"output":{"name":"foldwhile"}}],[11,"split","","Split the `Zip` evenly in two.",27,null],[11,"into_inner","","Return the inner value",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[0,"prelude","","ndarray prelude.",null,null],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"arraybase"}}],[11,"clone_from","","`Array` implements `.clone_from()` to reuse an array's existing allocation. Semantically equivalent to `*self = other.clone()`, but potentially more efficient.",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"from_vec","","Create a one-dimensional array from a vector (no copying needed).",5,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"from_iter","","Create a one-dimensional array from an iterable.",5,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"linspace","","Create a one-dimensional array from the inclusive interval `[start, end]` with `n` elements. `A` must be a floating point type.",5,{"inputs":[{"name":"a"},{"name":"a"},{"name":"usize"}],"output":{"name":"self"}}],[11,"range","","Create a one-dimensional array from the half-open interval `[start, end)` with elements spaced by `step`. `A` must be a floating point type.",5,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"self"}}],[11,"eye","","Create an identity matrix of size `n` (square 2D array).",5,{"inputs":[{"name":"ix"}],"output":{"name":"self"}}],[11,"from_elem","","Create an array with copies of `elem`, shape `shape`.",5,{"inputs":[{"name":"sh"},{"name":"a"}],"output":{"name":"self"}}],[11,"zeros","","Create an array with zeros, shape `shape`.",5,{"inputs":[{"name":"sh"}],"output":{"name":"self"}}],[11,"default","","Create an array with default values, shape `shape`",5,{"inputs":[{"name":"sh"}],"output":{"name":"self"}}],[11,"from_shape_fn","","Create an array with values created by the function `f`.",5,{"inputs":[{"name":"sh"},{"name":"f"}],"output":{"name":"self"}}],[11,"from_shape_vec","","Create an array with the given shape from a vector. (No cloning of elements needed.)",5,{"inputs":[{"name":"sh"},{"name":"vec"}],"output":{"name":"result"}}],[11,"from_shape_vec_unchecked","","Create an array from a vector and interpret it according to the provided dimensions and strides. (No cloning of elements needed.)",5,{"inputs":[{"name":"sh"},{"name":"vec"}],"output":{"name":"self"}}],[11,"uninitialized","","Create an array with uninitalized elements, shape `shape`.",5,{"inputs":[{"name":"sh"}],"output":{"name":"self"}}],[11,"len","","Return the total number of elements in the array.",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len_of","","Return the length of `axis`.",5,{"inputs":[{"name":"self"},{"name":"axis"}],"output":{"name":"usize"}}],[11,"ndim","","Return the number of dimensions (axes) in the array",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"dim","","Return the shape of the array in its “pattern” form, an integer in the one-dimensional case, tuple in the n-dimensional cases and so on.",5,null],[11,"raw_dim","","Return the shape of the array as it stored in the array.",5,{"inputs":[{"name":"self"}],"output":{"name":"d"}}],[11,"shape","","Return the shape of the array as a slice.",5,null],[11,"strides","","Return the strides of the array as a slice",5,null],[11,"view","","Return a read-only view of the array",5,{"inputs":[{"name":"self"}],"output":{"name":"arrayview"}}],[11,"view_mut","","Return a read-write view of the array",5,{"inputs":[{"name":"self"}],"output":{"name":"arrayviewmut"}}],[11,"to_owned","","Return an uniquely owned copy of the array",5,{"inputs":[{"name":"self"}],"output":{"name":"array"}}],[11,"to_shared","","Return a shared ownership (copy on write) array.",5,{"inputs":[{"name":"self"}],"output":{"name":"rcarray"}}],[11,"into_shared","","Turn the array into a shared ownership (copy on write) array, without any copying.",5,{"inputs":[{"name":"self"}],"output":{"name":"rcarray"}}],[11,"iter","","Return an iterator of references to the elements of the array.",5,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Return an iterator of mutable references to the elements of the array.",5,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"indexed_iter","","Return an iterator of indexes and references to the elements of the array.",5,{"inputs":[{"name":"self"}],"output":{"name":"indexediter"}}],[11,"indexed_iter_mut","","Return an iterator of indexes and mutable references to the elements of the array.",5,{"inputs":[{"name":"self"}],"output":{"name":"indexeditermut"}}],[11,"slice","","Return a sliced array.",5,null],[11,"slice_mut","","Return a sliced read-write view of the array.",5,null],[11,"islice","","Slice the array’s view in place.",5,null],[11,"get","","Return a reference to the element at `index`, or return `None` if the index is out of bounds.",5,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[11,"get_mut","","Return a mutable reference to the element at `index`, or return `None` if the index is out of bounds.",5,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[11,"uget","","Perform unchecked array indexing.",5,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"a"}}],[11,"uget_mut","","Perform unchecked array indexing.",5,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"a"}}],[11,"swap","","Swap elements at indices `index1` and `index2`.",5,{"inputs":[{"name":"self"},{"name":"i"},{"name":"i"}],"output":null}],[11,"subview","","Along `axis`, select the subview `index` and return a view with that axis removed.",5,{"inputs":[{"name":"self"},{"name":"axis"},{"name":"ix"}],"output":{"name":"arrayview"}}],[11,"subview_mut","","Along `axis`, select the subview `index` and return a read-write view with the axis removed.",5,{"inputs":[{"name":"self"},{"name":"axis"},{"name":"ix"}],"output":{"name":"arrayviewmut"}}],[11,"isubview","","Collapse dimension `axis` into length one, and select the subview of `index` along that axis.",5,{"inputs":[{"name":"self"},{"name":"axis"},{"name":"ix"}],"output":null}],[11,"into_subview","","Along `axis`, select the subview `index` and return `self` with that axis removed.",5,{"inputs":[{"name":"self"},{"name":"axis"},{"name":"ix"}],"output":{"name":"arraybase"}}],[11,"select","","Along `axis`, select arbitrary subviews corresponding to `indices`  and and copy them into a new array.",5,null],[11,"inner_iter","","Return an iterator that traverses over all dimensions but the innermost, and yields each inner row.",5,{"inputs":[{"name":"self"}],"output":{"name":"inneriter"}}],[11,"inner_iter_mut","","Return an iterator that traverses over all dimensions but the innermost, and yields each inner row.",5,{"inputs":[{"name":"self"}],"output":{"name":"inneritermut"}}],[11,"outer_iter","","Return an iterator that traverses over the outermost dimension and yields each subview.",5,{"inputs":[{"name":"self"}],"output":{"name":"axisiter"}}],[11,"outer_iter_mut","","Return an iterator that traverses over the outermost dimension and yields each subview.",5,{"inputs":[{"name":"self"}],"output":{"name":"axisitermut"}}],[11,"axis_iter","","Return an iterator that traverses over `axis` and yields each subview along it.",5,{"inputs":[{"name":"self"},{"name":"axis"}],"output":{"name":"axisiter"}}],[11,"axis_iter_mut","","Return an iterator that traverses over `axis` and yields each mutable subview along it.",5,{"inputs":[{"name":"self"},{"name":"axis"}],"output":{"name":"axisitermut"}}],[11,"axis_chunks_iter","","Return an iterator that traverses over `axis` by chunks of `size`, yielding non-overlapping views along that axis.",5,{"inputs":[{"name":"self"},{"name":"axis"},{"name":"usize"}],"output":{"name":"axischunksiter"}}],[11,"axis_chunks_iter_mut","","Return an iterator that traverses over `axis` by chunks of `size`, yielding non-overlapping read-write views along that axis.",5,{"inputs":[{"name":"self"},{"name":"axis"},{"name":"usize"}],"output":{"name":"axischunksitermut"}}],[11,"whole_chunks","","Return a whole chunks producer (and iterable).",5,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"wholechunks"}}],[11,"whole_chunks_mut","","Return a whole chunks producer (and iterable).",5,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"wholechunksmut"}}],[11,"diag","","Return an view of the diagonal elements of the array.",5,{"inputs":[{"name":"self"}],"output":{"name":"arrayview1"}}],[11,"diag_mut","","Return a read-write view over the diagonal elements of the array.",5,{"inputs":[{"name":"self"}],"output":{"name":"arrayviewmut1"}}],[11,"into_diag","","Return the diagonal as a one-dimensional array.",5,{"inputs":[{"name":"self"}],"output":{"name":"arraybase"}}],[11,"is_standard_layout","","Return `true` if the array data is laid out in contiguous “C order” in memory (where the last index is the most rapidly varying).",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_ptr","","Return a pointer to the first element in the array.",5,null],[11,"as_mut_ptr","","Return a mutable pointer to the first element in the array.",5,null],[11,"as_slice","","Return the array’s data as a slice, if it is contiguous and in standard order. Return `None` otherwise.",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_slice_mut","","Return the array’s data as a slice, if it is contiguous and in standard order. Return `None` otherwise.",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_slice_memory_order","","Return the array’s data as a slice if it is contiguous, return `None` otherwise.",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_slice_memory_order_mut","","Return the array’s data as a slice if it is contiguous, return `None` otherwise.",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_shape","","Transform the array into `shape`; any shape with the same number of elements is accepted, but the source array or view must be contiguous, otherwise we cannot rearrange the dimension.",5,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"result"}}],[11,"reshape","","Note: Reshape is for `RcArray` only. Use `.into_shape()` for other arrays and array views.",5,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"arraybase"}}],[11,"broadcast","","Act like a larger size and/or shape array by broadcasting into a larger shape, if possible.",5,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"option"}}],[11,"swap_axes","","Swap axes `ax` and `bx`.",5,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"reversed_axes","","Transpose the array by reversing axes.",5,{"inputs":[{"name":"self"}],"output":{"name":"arraybase"}}],[11,"t","","Return a transposed view of the array.",5,{"inputs":[{"name":"self"}],"output":{"name":"arrayview"}}],[11,"axes","","Return an iterator over the length and stride of each axis.",5,{"inputs":[{"name":"self"}],"output":{"name":"axes"}}],[11,"max_stride_axis","","Return the axis with the greatest stride (by absolute value), preferring axes with len > 1.",5,{"inputs":[{"name":"self"}],"output":{"name":"axis"}}],[11,"invert_axis","","Reverse the stride of `axis`.",5,{"inputs":[{"name":"self"},{"name":"axis"}],"output":null}],[11,"merge_axes","","If possible, merge in the axis `take` to `into`.",5,{"inputs":[{"name":"self"},{"name":"axis"},{"name":"axis"}],"output":{"name":"bool"}}],[11,"remove_axis","","Remove array axis `axis` and return the result.",5,{"inputs":[{"name":"self"},{"name":"axis"}],"output":{"name":"arraybase"}}],[11,"assign","","Perform an elementwise assigment to `self` from `rhs`.",5,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":null}],[11,"fill","","Perform an elementwise assigment to `self` from element `x`.",5,{"inputs":[{"name":"self"},{"name":"a"}],"output":null}],[11,"zip_mut_with","","Traverse two arrays in unspecified order, in lock step, calling the closure `f` on each element pair.",5,{"inputs":[{"name":"self"},{"name":"arraybase"},{"name":"f"}],"output":null}],[11,"fold","","Traverse the array elements and apply a fold, returning the resulting value.",5,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"b"}}],[11,"map","","Call `f` by reference on each element and create a new array with the new values.",5,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"array"}}],[11,"mapv","","Call `f` by value on each element and create a new array with the new values.",5,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"array"}}],[11,"mapv_into","","Call `f` by value on each element, update the array with the new values and return it.",5,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"map_inplace","","Modify the array in place by calling `f` by mutable reference on each element.",5,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"mapv_inplace","","Modify the array in place by calling `f` by value on each element. The array is updated with the new values.",5,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"visit","","Visit each element in the array by calling `f` by reference on each element.",5,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"fold_axis","","Fold along an axis.",5,{"inputs":[{"name":"self"},{"name":"axis"},{"name":"b"},{"name":"f"}],"output":{"name":"array"}}],[11,"map_axis","","Reduce the values along an axis into just one value, producing a new array with one less dimension.",5,{"inputs":[{"name":"self"},{"name":"axis"},{"name":"f"}],"output":{"name":"array"}}],[11,"into_raw_vec","","Return a vector of the elements in the array, in the way they are stored internally.",5,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"into_owned","","Convert an `RcArray` into `Array`; cloning the array elements to unshare them if necessary.",5,{"inputs":[{"name":"self"}],"output":{"name":"array"}}],[11,"to_vec","","Return an vector with the elements of the one-dimensional array.",5,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"row","","Return an array view of row `index`.",5,{"inputs":[{"name":"self"},{"name":"ix"}],"output":{"name":"arrayview1"}}],[11,"row_mut","","Return a mutable array view of row `index`.",5,{"inputs":[{"name":"self"},{"name":"ix"}],"output":{"name":"arrayviewmut1"}}],[11,"rows","","Return the number of rows (length of `Axis(0)`) in the two-dimensional array.",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"column","","Return an array view of column `index`.",5,{"inputs":[{"name":"self"},{"name":"ix"}],"output":{"name":"arrayview1"}}],[11,"column_mut","","Return a mutable array view of column `index`.",5,{"inputs":[{"name":"self"},{"name":"ix"}],"output":{"name":"arrayviewmut1"}}],[11,"cols","","Return the number of columns (length of `Axis(1)`) in the two-dimensional array.",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_square","","Return true if the array is square, false otherwise.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"scalar_sum","","Return the sum of all elements in the array.",5,{"inputs":[{"name":"self"}],"output":{"name":"a"}}],[11,"sum","","Return sum along `axis`.",5,{"inputs":[{"name":"self"},{"name":"axis"}],"output":{"name":"array"}}],[11,"mean","","Return mean along `axis`.",5,{"inputs":[{"name":"self"},{"name":"axis"}],"output":{"name":"array"}}],[11,"all_close","","Return `true` if the arrays' elementwise differences are all within the given absolute tolerance, `false` otherwise.",5,{"inputs":[{"name":"self"},{"name":"arraybase"},{"name":"a"}],"output":{"name":"bool"}}],[0,"linalg","","Linear algebra.",null,null],[5,"general_mat_mul","ndarray::linalg","General matrix multiplication.",null,{"inputs":[{"name":"a"},{"name":"arraybase"},{"name":"arraybase"},{"name":"a"},{"name":"arraybase"}],"output":null}],[11,"dot","ndarray","Compute the dot product of one-dimensional arrays.",5,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":{"name":"a"}}],[11,"dot","","Perform matrix multiplication of rectangular arrays `self` and `rhs`.",5,null],[11,"dot","","",5,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":{"name":"array2"}}],[11,"dot","","",5,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":{"name":"array"}}],[11,"scaled_add","","Perform the operation `self += alpha * rhs` efficiently, where `alpha` is a scalar and `rhs` is another array. This operation is also known as `axpy` in BLAS.",5,{"inputs":[{"name":"self"},{"name":"a"},{"name":"arraybase"}],"output":null}],[8,"Dot","ndarray::linalg","Matrix Multiplication",null,null],[16,"Output","","The result of the operation.",28,null],[10,"dot","","",28,null],[11,"add","ndarray","",5,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"add","","",5,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"add","","",5,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"arraybase"}}],[11,"sub","","",5,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"sub","","",5,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"sub","","",5,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"arraybase"}}],[11,"mul","","",5,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"mul","","",5,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"mul","","",5,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"arraybase"}}],[11,"div","","",5,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"div","","",5,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"div","","",5,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"arraybase"}}],[11,"rem","","",5,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"rem","","",5,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"rem","","",5,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"arraybase"}}],[11,"bitand","","",5,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"bitand","","",5,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"bitand","","",5,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"arraybase"}}],[11,"bitor","","",5,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"bitor","","",5,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"bitor","","",5,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"arraybase"}}],[11,"bitxor","","",5,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"bitxor","","",5,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"bitxor","","",5,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"arraybase"}}],[11,"shl","","",5,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"shl","","",5,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"shl","","",5,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"arraybase"}}],[11,"shr","","",5,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"shr","","",5,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"shr","","",5,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"arraybase"}}],[11,"neg","","Perform an elementwise negation of `self` and return the result.",5,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"not","","Perform an elementwise unary not of `self` and return the result.",5,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"add_assign","","",5,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":null}],[11,"add_assign","","",5,{"inputs":[{"name":"self"},{"name":"a"}],"output":null}],[11,"sub_assign","","",5,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":null}],[11,"sub_assign","","",5,{"inputs":[{"name":"self"},{"name":"a"}],"output":null}],[11,"mul_assign","","",5,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":null}],[11,"mul_assign","","",5,{"inputs":[{"name":"self"},{"name":"a"}],"output":null}],[11,"div_assign","","",5,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":null}],[11,"div_assign","","",5,{"inputs":[{"name":"self"},{"name":"a"}],"output":null}],[11,"rem_assign","","",5,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":null}],[11,"rem_assign","","",5,{"inputs":[{"name":"self"},{"name":"a"}],"output":null}],[11,"bitand_assign","","",5,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":null}],[11,"bitand_assign","","",5,{"inputs":[{"name":"self"},{"name":"a"}],"output":null}],[11,"bitor_assign","","",5,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":null}],[11,"bitor_assign","","",5,{"inputs":[{"name":"self"},{"name":"a"}],"output":null}],[11,"bitxor_assign","","",5,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":null}],[11,"bitxor_assign","","",5,{"inputs":[{"name":"self"},{"name":"a"}],"output":null}],[11,"shl_assign","","",5,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":null}],[11,"shl_assign","","",5,{"inputs":[{"name":"self"},{"name":"a"}],"output":null}],[11,"shr_assign","","",5,{"inputs":[{"name":"self"},{"name":"arraybase"}],"output":null}],[11,"shr_assign","","",5,{"inputs":[{"name":"self"},{"name":"a"}],"output":null}],[11,"from_shape","","Create a read-only array view borrowing its data from a slice.",5,null],[11,"from_shape_ptr","","Create an `ArrayView<A, D>` from shape information and a raw pointer to the elements.",5,null],[11,"split_at","","Split the array view along `axis` and return one view strictly before the split and one view after the split.",5,null],[11,"into_slice","","Return the array’s data as a slice, if it is contiguous and in standard order. Return `None` otherwise.",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from_shape","","Create a read-write array view borrowing its data from a slice.",5,null],[11,"from_shape_ptr","","Create an `ArrayViewMut<A, D>` from shape information and a raw pointer to the elements.",5,null],[11,"split_at","","Split the array view along `axis` and return one mutable view strictly before the split and one mutable view after the split.",5,null],[11,"into_slice","","Return the array’s data as a slice, if it is contiguous and in standard order. Return `None` otherwise.",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[6,"Ix0","","zero-dimensionial",null,null],[6,"Ix1","","one-dimensional",null,null],[6,"Ix2","","two-dimensional",null,null],[6,"Ix3","","three-dimensional",null,null],[6,"Ix4","","four-dimensional",null,null],[6,"Ix5","","five-dimensional",null,null],[6,"Ix6","","six-dimensional",null,null],[6,"IxDyn","","dynamic-dimensional",null,null],[6,"Array0","","zero-dimensional array",null,null],[6,"Array1","","one-dimensional array",null,null],[6,"Array2","","two-dimensional array",null,null],[6,"Array3","","three-dimensional array",null,null],[6,"Array4","","four-dimensional array",null,null],[6,"Array5","","five-dimensional array",null,null],[6,"Array6","","six-dimensional array",null,null],[6,"ArrayD","","dynamic-dimensional array",null,null],[6,"ArrayView0","","zero-dimensional array view",null,null],[6,"ArrayView1","","one-dimensional array view",null,null],[6,"ArrayView2","","two-dimensional array view",null,null],[6,"ArrayView3","","three-dimensional array view",null,null],[6,"ArrayView4","","four-dimensional array view",null,null],[6,"ArrayView5","","five-dimensional array view",null,null],[6,"ArrayView6","","six-dimensional array view",null,null],[6,"ArrayViewD","","dynamic-dimensional array view",null,null],[6,"ArrayViewMut0","","zero-dimensional read-write array view",null,null],[6,"ArrayViewMut1","","one-dimensional read-write array view",null,null],[6,"ArrayViewMut2","","two-dimensional read-write array view",null,null],[6,"ArrayViewMut3","","three-dimensional read-write array view",null,null],[6,"ArrayViewMut4","","four-dimensional read-write array view",null,null],[6,"ArrayViewMut5","","five-dimensional read-write array view",null,null],[6,"ArrayViewMut6","","six-dimensional read-write array view",null,null],[6,"ArrayViewMutD","","dynamic-dimensional read-write array view",null,null],[6,"RcArray1","","one-dimensional shared ownership array",null,null],[6,"RcArray2","","two-dimensional shared ownership array",null,null],[6,"Ix","","Array index type",null,null],[6,"Ixs","","Array index type (signed)",null,null],[6,"RcArray","","An array where the data has shared ownership and is copy on write. It can act as both an owner as the data as well as a shared reference (view like).",null,null],[6,"Array","","An array that owns its data uniquely.",null,null],[6,"ArrayView","","A read-only array view.",null,null],[6,"ArrayViewMut","","A read-write array view.",null,null],[17,"S","","Slice value for the full range of an axis.",null,null],[8,"Dimension","","Array shape and index trait.",null,null],[16,"SliceArg","","`SliceArg` is the type which is used to specify slicing for this dimension.",29,null],[16,"Pattern","","Pattern matching friendly form of the dimension value.",29,null],[10,"into_pattern","","Convert the dimension into a pattern matching friendly value.",29,null],[11,"size","","Compute the size of the dimension (number of elements)",29,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"size_checked","","Compute the size while checking for overflow.",29,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_array_view","","Borrow as a read-only array view.",29,{"inputs":[{"name":"self"}],"output":{"name":"arrayview1"}}],[11,"as_array_view_mut","","Borrow as a read-write array view.",29,{"inputs":[{"name":"self"}],"output":{"name":"arrayviewmut1"}}],[8,"IntoDimension","","Argument conversion a dimension.",null,null],[16,"Dim","","",30,null],[10,"into_dimension","","",30,null],[8,"RemoveAxis","","Array shape with a next smaller dimension.",null,null],[16,"Smaller","","",31,null],[10,"remove_axis","","",31,null],[8,"NdIndex","","Tuple or fixed size arrays that can be used to index an array.",null,null],[8,"AsArray","","Argument conversion into an array view",null,null],[8,"LinalgScalar","","Elements that support linear algebra operations.",null,null],[8,"NdFloat","","Floating-point element types `f32` and `f64`.",null,null],[8,"ShapeBuilder","","A trait for `Shape` and `D where D: Dimension` that allows customizing the memory layout (strides) of an array shape.",null,null],[16,"Dim","","",32,null],[16,"Strides","","",32,null],[10,"into_shape","","",32,{"inputs":[{"name":"self"}],"output":{"name":"shape"}}],[10,"f","","",32,{"inputs":[{"name":"self"}],"output":{"name":"shape"}}],[10,"set_f","","",32,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"shape"}}],[10,"strides","","",32,null],[8,"Data","","Array representation trait.",null,null],[16,"Elem","","The array element type.",33,null],[8,"DataMut","","Array representation trait.",null,null],[8,"DataOwned","","Array representation trait.",null,null],[8,"DataShared","","Array representation trait.",null,null],[8,"DataClone","","Array representation trait.",null,null],[8,"FixedInitializer","","Fixed-size array used for array initialization",null,null],[16,"Elem","","",34,null],[10,"as_init_slice","","",34,null],[10,"len","","",34,{"inputs":[],"output":{"name":"usize"}}],[8,"NdProducer","","A producer of an n-dimensional set of elements; for example an array view, mutable array view or an iterator that yields chunks.",null,null],[16,"Item","","The element produced per iteration.",35,null],[16,"Dim","","Dimension type",35,null],[10,"__private__","","This trait is private to implement; this method exists to make it impossible to implement outside the crate.",35,{"inputs":[{"name":"self"}],"output":{"name":"privatemarker"}}],[8,"IntoNdProducer","","Argument conversion into a producer.",null,null],[16,"Dim","","",36,null],[16,"Output","","",36,null],[10,"into_producer","","",36,null],[8,"ScalarOperand","","Elements that can be used as direct operands in arithmetic with arrays.",null,null],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"viewrepr"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"indexediter"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"shape"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"strideshape"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[14,"array","","Create an `Array` with one, two or three dimensions.",null,null],[14,"s","","Slice argument constructor.",null,null],[14,"stack","","Stack arrays along the given axis.",null,null],[14,"azip","","Array zip macro: lock step function application across several arrays and producers.",null,null],[11,"into_iter","","",37,null],[11,"into_iter","","",38,null],[11,"into_dimension","","",39,{"inputs":[{"name":"self"}],"output":{"name":"ix1"}}],[11,"size","","Compute the size of the dimension (number of elements)",29,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"size_checked","","Compute the size while checking for overflow.",29,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_array_view","","Borrow as a read-only array view.",29,{"inputs":[{"name":"self"}],"output":{"name":"arrayview1"}}],[11,"as_array_view_mut","","Borrow as a read-write array view.",29,{"inputs":[{"name":"self"}],"output":{"name":"arrayviewmut1"}}],[11,"ndim","","",40,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"slice","","",40,null],[11,"slice_mut","","",40,null],[11,"into_pattern","","",40,null],[11,"try_remove_axis","","",40,null],[11,"index_checked","","",39,{"inputs":[{"name":"self"},{"name":"ix1"},{"name":"ix1"}],"output":{"name":"option"}}],[11,"index_unchecked","","",39,{"inputs":[{"name":"self"},{"name":"ix1"}],"output":{"name":"isize"}}],[11,"index_checked","","",39,{"inputs":[{"name":"self"},{"name":"ixdyn"},{"name":"ixdyn"}],"output":{"name":"option"}}],[11,"index_unchecked","","",39,{"inputs":[{"name":"self"},{"name":"ixdyn"}],"output":{"name":"isize"}}],[11,"from","","",41,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"from","","",42,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"from","","",43,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}]],"paths":[[3,"Axis"],[3,"AxisDescription"],[3,"Si"],[4,"ErrorKind"],[4,"FoldWhile"],[3,"ArrayBase"],[3,"Dim"],[3,"ViewRepr"],[3,"Axes"],[3,"Indices"],[3,"WholeChunks"],[3,"WholeChunksMut"],[3,"WholeChunksIter"],[3,"WholeChunksIterMut"],[3,"Iter"],[3,"IndexedIter"],[3,"IterMut"],[3,"IndexedIterMut"],[3,"InnerIter"],[3,"InnerIterMut"],[3,"AxisIter"],[3,"AxisIterMut"],[3,"AxisChunksIter"],[3,"AxisChunksIterMut"],[3,"ShapeError"],[3,"Shape"],[3,"StrideShape"],[3,"Zip"],[8,"Dot"],[8,"Dimension"],[8,"IntoDimension"],[8,"RemoveAxis"],[8,"ShapeBuilder"],[8,"Data"],[8,"FixedInitializer"],[8,"NdProducer"],[8,"IntoNdProducer"],[6,"ArrayView"],[6,"ArrayViewMut"],[6,"Ix"],[6,"IxDyn"],[6,"Array1"],[6,"Array2"],[6,"Array3"]]};
searchIndex["ndarray_rand"] = {"doc":"Constructors for randomized arrays. `rand` integration for `ndarray`.","items":[[3,"F32","ndarray_rand","A wrapper type that allows casting f64 distributions to f32",null,null],[12,"0","","",0,null],[8,"RandomExt","","Constructors for n-dimensional arrays with random elements.",null,null],[10,"random","","Create an array with shape `dim` with elements drawn from `distribution`  using the default rng.",1,{"inputs":[{"name":"sh"},{"name":"ids"}],"output":{"name":"arraybase"}}],[10,"random_using","","Create an array with shape `dim` with elements drawn from `distribution`, using a specific Rng `rng`.",1,{"inputs":[{"name":"sh"},{"name":"ids"},{"name":"r"}],"output":{"name":"arraybase"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"sample","","",0,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f32"}}],[11,"ind_sample","","",0,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f32"}}]],"paths":[[3,"F32"],[8,"RandomExt"]]};
initSearch(searchIndex);
