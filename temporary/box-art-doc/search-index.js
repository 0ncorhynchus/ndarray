var N = null;var searchIndex = {};
searchIndex["ndarray"]={"doc":"The `ndarray` crate provides an n-dimensional container for general elements and for numerics.","items":[[3,"Axis","ndarray","An axis index.",N,N],[12,"0","","",0,N],[3,"AxisDescription","","Description of the axis, its length and its stride.",N,N],[12,"0","","",1,N],[12,"1","","",1,N],[12,"2","","",1,N],[3,"Dim","","Dimension description.",N,N],[3,"IxDynImpl","","Dynamic dimension or index type.",N,N],[3,"ShapeError","","An error related to array shape or layout.",N,N],[3,"Slice","","A slice (range with step size).",N,N],[12,"start","","",2,N],[12,"end","","",2,N],[12,"step","","",2,N],[3,"SliceInfo","","Represents all of the necessary information to perform a slice.",N,N],[3,"Zip","","Lock step function application across several arrays or other producers.",N,N],[3,"ArrayBase","","An n-dimensional array.",N,N],[3,"OwnedRepr","","Array's representation.",N,N],[3,"OwnedArcRepr","","ArcArray's representation.",N,N],[3,"RawViewRepr","","Array pointer’s representation.",N,N],[3,"ViewRepr","","Array view’s representation.",N,N],[3,"Shape","","A contiguous array shape of n dimensions.",N,N],[3,"StrideShape","","An array shape of n dimensions in c-order, f-order or custom strides.",N,N],[4,"ErrorKind","","Error code for an error related to array shape or layout.",N,N],[13,"IncompatibleShape","","incompatible shape",3,N],[13,"IncompatibleLayout","","incompatible memory layout",3,N],[13,"RangeLimited","","the shape does not fit inside type limits",3,N],[13,"OutOfBounds","","out of bounds indexing",3,N],[13,"Unsupported","","aliasing array elements",3,N],[13,"Overflow","","overflow when computing offset, length, etc.",3,N],[4,"SliceOrIndex","","A slice (range with step) or an index.",N,N],[13,"Slice","","A range with step size. `end` is an exclusive index. Negative `begin` or `end` indexes are counted from the back of the axis. If `end` is `None`, the slice extends to the end of the axis.",4,N],[12,"start","ndarray::SliceOrIndex","",4,N],[12,"end","","",4,N],[12,"step","","",4,N],[13,"Index","ndarray","A single index.",4,N],[4,"FoldWhile","","Value controlling the execution of `.fold_while` on `Zip`.",N,N],[13,"Continue","","Continue folding with this value",5,N],[13,"Done","","Fold is complete and will return this value",5,N],[5,"Dim","","Create a new dimension value.",N,N],[5,"indices","","Create an iterable of the array shape `shape`.",N,[[["e"]],["indices"]]],[5,"indices_of","","Return an iterable of the indices of the passed-in array.",N,[[["arraybase"]],["indices"]]],[5,"stack","","Stack arrays along the given axis.",N,N],[5,"Ix0","","Create a zero-dimensional index",N,[[],["ix0"]]],[5,"Ix1","","Create a one-dimensional index",N,[[["ix"]],["ix1"]]],[5,"Ix2","","Create a two-dimensional index",N,[[["ix"],["ix"]],["ix2"]]],[5,"Ix3","","Create a three-dimensional index",N,[[["ix"],["ix"],["ix"]],["ix3"]]],[5,"Ix4","","Create a four-dimensional index",N,[[["ix"],["ix"],["ix"],["ix"]],["ix4"]]],[5,"Ix5","","Create a five-dimensional index",N,[[["ix"],["ix"],["ix"],["ix"],["ix"]],["ix5"]]],[5,"Ix6","","Create a six-dimensional index",N,[[["ix"],["ix"],["ix"],["ix"],["ix"],["ix"]],["ix6"]]],[5,"IxDyn","","Create a dynamic-dimensional index",N,N],[5,"arr0","","Create a zero-dimensional array with the element `x`.",N,[[["a"]],["array0"]]],[5,"arr1","","Create a one-dimensional array with elements from `xs`.",N,N],[5,"rcarr1","","Create a one-dimensional array with elements from `xs`.",N,N],[5,"aview0","","Create a zero-dimensional array view borrowing `x`.",N,[[["a"]],["arrayview0"]]],[5,"aview1","","Create a one-dimensional array view with elements borrowing `xs`.",N,N],[5,"aview2","","Create a two-dimensional array view with elements borrowing `xs`.",N,N],[5,"aview_mut1","","Create a one-dimensional read-write array view with elements borrowing `xs`.",N,N],[5,"aview_mut2","","Create a two-dimensional read-write array view with elements borrowing `xs`.",N,N],[5,"arr2","","Create a two-dimensional array with elements from `xs`.",N,N],[5,"rcarr2","","Create a two-dimensional array with elements from `xs`.",N,N],[5,"arr3","","Create a three-dimensional array with elements from `xs`.",N,N],[5,"rcarr3","","Create a three-dimensional array with elements from `xs`.",N,N],[11,"index","","Return the index of the axis.",0,[[["self"]],["usize"]]],[11,"axis","","Return axis",1,[[["self"]],["axis"]]],[11,"len","","Return length",1,[[["self"]],["ix"]]],[11,"stride","","Return stride",1,[[["self"]],["ixs"]]],[0,"iter","","Producers, iterables and iterators.",N,N],[3,"Axes","ndarray::iter","An iterator over the length and stride of each axis of an array.",N,N],[3,"Indices","","Indices producer and iterable.",N,N],[3,"IndicesIter","","An iterator over the indexes of an array shape.",N,N],[3,"Iter","","An iterator over the elements of an array.",N,N],[3,"IterMut","","An iterator over the elements of an array (mutable).",N,N],[3,"IndexedIter","","An iterator over the indexes and elements of an array.",N,N],[3,"IndexedIterMut","","An iterator over the indexes and elements of an array (mutable).",N,N],[3,"Lanes","","See `.lanes()` for more information.",N,N],[3,"LanesMut","","See `.lanes_mut()` for more information.",N,N],[3,"LanesIter","","An iterator that traverses over all axes but one, and yields a view for each lane along that axis.",N,N],[3,"LanesIterMut","","An iterator that traverses over all dimensions but the innermost, and yields each inner row (mutable).",N,N],[3,"AxisIter","","An iterator that traverses over an axis and and yields each subview.",N,N],[3,"AxisIterMut","","An iterator that traverses over an axis and and yields each subview (mutable)",N,N],[3,"AxisChunksIter","","An iterator that traverses over the specified axis and yields views of the specified size on this axis.",N,N],[3,"AxisChunksIterMut","","An iterator that traverses over the specified axis and yields mutable views of the specified size on this axis.",N,N],[3,"ExactChunks","","Exact chunks producer and iterable.",N,N],[3,"ExactChunksIter","","Exact chunks iterator.",N,N],[3,"ExactChunksMut","","Exact chunks producer and iterable.",N,N],[3,"ExactChunksIterMut","","Exact chunks iterator.",N,N],[3,"Windows","","Window producer and iterable",N,N],[11,"new","ndarray","Create a new `Slice` with the given extents.",2,[[["isize"],["option",["isize"]],["isize"]],["slice"]]],[11,"step_by","","Create a new `Slice` with the given step size (multiplied with the previous step size).",2,[[["self"],["isize"]],["self"]]],[11,"is_slice","","Returns `true` if `self` is a `Slice` value.",4,[[["self"]],["bool"]]],[11,"is_index","","Returns `true` if `self` is an `Index` value.",4,[[["self"]],["bool"]]],[11,"step_by","","Returns a new `SliceOrIndex` with the given step size (multiplied with the previous step size).",4,[[["self"],["isize"]],["self"]]],[11,"new","","Returns a new `SliceInfo` instance.",6,[[["t"]],["result",["sliceinfo","shapeerror"]]]],[11,"out_ndim","","Returns the number of dimensions after calling `.slice()` (including taking subviews).",6,[[["self"]],["usize"]]],[11,"split_at","ndarray::iter","Split the iterator at index, yielding two disjoint iterators.",7,N],[11,"split_at","","Split the iterator at index, yielding two disjoint iterators.",8,N],[11,"kind","ndarray","Return the `ErrorKind` of this error.",9,[[["self"]],["errorkind"]]],[11,"from_kind","","Create a new `ShapeError`",9,[[["errorkind"]],["self"]]],[11,"size","","Return the size of the shape in number of elements",10,[[["self"]],["usize"]]],[11,"from","","Create a new `Zip` from the input array or other producer `p`.",11,[[["ip"]],["self"]]],[11,"indexed","","Create a new `Zip` with an index producer and the producer `p`.",11,[[["ip"]],["self"]]],[11,"size","","Return a the number of element tuples in the Zip",11,[[["self"]],["usize"]]],[11,"apply","","Apply a function to all elements of the input arrays, visiting elements in lock step.",11,[[["self"],["f"]]]],[11,"fold_while","","Apply a fold function to all elements of the input arrays, visiting elements in lock step.",11,[[["self"],["acc"],["f"]],["foldwhile"]]],[11,"and","","Include the producer `p` in the Zip.",11,[[["self"],["p"]],["zip"]]],[11,"and_broadcast","","Include the producer `p` in the Zip, broadcasting if needed.",11,[[["self"],["p"]],["zip"]]],[11,"split","","Split the `Zip` evenly in two.",11,N],[11,"apply","","Apply a function to all elements of the input arrays, visiting elements in lock step.",11,[[["self"],["f"]]]],[11,"fold_while","","Apply a fold function to all elements of the input arrays, visiting elements in lock step.",11,[[["self"],["acc"],["f"]],["foldwhile"]]],[11,"and","","Include the producer `p` in the Zip.",11,[[["self"],["p"]],["zip"]]],[11,"and_broadcast","","Include the producer `p` in the Zip, broadcasting if needed.",11,[[["self"],["p"]],["zip"]]],[11,"split","","Split the `Zip` evenly in two.",11,N],[11,"apply","","Apply a function to all elements of the input arrays, visiting elements in lock step.",11,[[["self"],["f"]]]],[11,"fold_while","","Apply a fold function to all elements of the input arrays, visiting elements in lock step.",11,[[["self"],["acc"],["f"]],["foldwhile"]]],[11,"and","","Include the producer `p` in the Zip.",11,[[["self"],["p"]],["zip"]]],[11,"and_broadcast","","Include the producer `p` in the Zip, broadcasting if needed.",11,[[["self"],["p"]],["zip"]]],[11,"split","","Split the `Zip` evenly in two.",11,N],[11,"apply","","Apply a function to all elements of the input arrays, visiting elements in lock step.",11,[[["self"],["f"]]]],[11,"fold_while","","Apply a fold function to all elements of the input arrays, visiting elements in lock step.",11,[[["self"],["acc"],["f"]],["foldwhile"]]],[11,"and","","Include the producer `p` in the Zip.",11,[[["self"],["p"]],["zip"]]],[11,"and_broadcast","","Include the producer `p` in the Zip, broadcasting if needed.",11,[[["self"],["p"]],["zip"]]],[11,"split","","Split the `Zip` evenly in two.",11,N],[11,"apply","","Apply a function to all elements of the input arrays, visiting elements in lock step.",11,[[["self"],["f"]]]],[11,"fold_while","","Apply a fold function to all elements of the input arrays, visiting elements in lock step.",11,[[["self"],["acc"],["f"]],["foldwhile"]]],[11,"and","","Include the producer `p` in the Zip.",11,[[["self"],["p"]],["zip"]]],[11,"and_broadcast","","Include the producer `p` in the Zip, broadcasting if needed.",11,[[["self"],["p"]],["zip"]]],[11,"split","","Split the `Zip` evenly in two.",11,N],[11,"apply","","Apply a function to all elements of the input arrays, visiting elements in lock step.",11,[[["self"],["f"]]]],[11,"fold_while","","Apply a fold function to all elements of the input arrays, visiting elements in lock step.",11,[[["self"],["acc"],["f"]],["foldwhile"]]],[11,"split","","Split the `Zip` evenly in two.",11,N],[11,"into_inner","","Return the inner value",5,[[["self"]],["t"]]],[11,"is_done","","Return true if it is `Done`, false if `Continue`",5,[[["self"]],["bool"]]],[0,"prelude","","ndarray prelude.",N,N],[11,"from_vec","","Create a one-dimensional array from a vector (no copying needed).",12,[[["vec"]],["self"]]],[11,"from_iter","","Create a one-dimensional array from an iterable.",12,[[["i"]],["self"]]],[11,"linspace","","Create a one-dimensional array from the inclusive interval `[start, end]` with `n` elements. `A` must be a floating point type.",12,[[["a"],["a"],["usize"]],["self"]]],[11,"range","","Create a one-dimensional array from the half-open interval `[start, end)` with elements spaced by `step`. `A` must be a floating point type.",12,[[["a"],["a"],["a"]],["self"]]],[11,"eye","","Create an identity matrix of size `n` (square 2D array).",12,[[["ix"]],["self"]]],[11,"from_elem","","Create an array with copies of `elem`, shape `shape`.",12,[[["sh"],["a"]],["self"]]],[11,"zeros","","Create an array with zeros, shape `shape`.",12,[[["sh"]],["self"]]],[11,"ones","","Create an array with ones, shape `shape`.",12,[[["sh"]],["self"]]],[11,"default","","Create an array with default values, shape `shape`",12,[[["sh"]],["self"]]],[11,"from_shape_fn","","Create an array with values created by the function `f`.",12,[[["sh"],["f"]],["self"]]],[11,"from_shape_vec","","Create an array with the given shape from a vector. (No cloning of elements needed.)",12,[[["sh"],["vec"]],["result",["shapeerror"]]]],[11,"from_shape_vec_unchecked","","Creates an array from a vector and interpret it according to the provided shape and strides. (No cloning of elements needed.)",12,[[["sh"],["vec"]],["self"]]],[11,"uninitialized","","Create an array with uninitalized elements, shape `shape`.",12,[[["sh"]],["self"]]],[11,"len","","Return the total number of elements in the array.",12,[[["self"]],["usize"]]],[11,"len_of","","Return the length of `axis`.",12,[[["self"],["axis"]],["usize"]]],[11,"is_empty","","Return whether the array has any elements",12,[[["self"]],["bool"]]],[11,"ndim","","Return the number of dimensions (axes) in the array",12,[[["self"]],["usize"]]],[11,"dim","","Return the shape of the array in its “pattern” form, an integer in the one-dimensional case, tuple in the n-dimensional cases and so on.",12,N],[11,"raw_dim","","Return the shape of the array as it stored in the array.",12,[[["self"]],["d"]]],[11,"shape","","Return the shape of the array as a slice.",12,N],[11,"strides","","Return the strides of the array as a slice",12,N],[11,"stride_of","","Return the stride of `axis`.",12,[[["self"],["axis"]],["isize"]]],[11,"view","","Return a read-only view of the array",12,[[["self"]],["arrayview"]]],[11,"view_mut","","Return a read-write view of the array",12,[[["self"]],["arrayviewmut"]]],[11,"to_owned","","Return an uniquely owned copy of the array.",12,[[["self"]],["array"]]],[11,"to_shared","","Return a shared ownership (copy on write) array.",12,[[["self"]],["arcarray"]]],[11,"into_owned","","Turn the array into a uniquely owned array, cloning the array elements if necessary.",12,[[["self"]],["array"]]],[11,"into_shared","","Turn the array into a shared ownership (copy on write) array, without any copying.",12,[[["self"]],["arcarray"]]],[11,"first","","Returns a reference to the first element of the array, or `None` if it is empty.",12,[[["self"]],["option"]]],[11,"first_mut","","Returns a mutable reference to the first element of the array, or `None` if it is empty.",12,[[["self"]],["option"]]],[11,"iter","","Return an iterator of references to the elements of the array.",12,[[["self"]],["iter"]]],[11,"iter_mut","","Return an iterator of mutable references to the elements of the array.",12,[[["self"]],["itermut"]]],[11,"indexed_iter","","Return an iterator of indexes and references to the elements of the array.",12,[[["self"]],["indexediter"]]],[11,"indexed_iter_mut","","Return an iterator of indexes and mutable references to the elements of the array.",12,[[["self"]],["indexeditermut"]]],[11,"slice","","Return a sliced view of the array.",12,[[["self"],["sliceinfo"]],["arrayview"]]],[11,"slice_mut","","Return a sliced read-write view of the array.",12,[[["self"],["sliceinfo"]],["arrayviewmut"]]],[11,"slice_move","","Slice the array, possibly changing the number of dimensions.",12,[[["self"],["sliceinfo"]],["arraybase"]]],[11,"slice_collapse","","Slice the array in place without changing the number of dimensions.",12,N],[11,"slice_inplace","","Slice the array in place without changing the number of dimensions.",12,N],[11,"slice_axis","","Return a view of the array, sliced along the specified axis.",12,[[["self"],["axis"],["slice"]],["arrayview"]]],[11,"slice_axis_mut","","Return a mutable view of the array, sliced along the specified axis.",12,[[["self"],["axis"],["slice"]],["arrayviewmut"]]],[11,"slice_axis_inplace","","Slice the array in place along the specified axis.",12,[[["self"],["axis"],["slice"]]]],[11,"get","","Return a reference to the element at `index`, or return `None` if the index is out of bounds.",12,[[["self"],["i"]],["option"]]],[11,"get_mut","","Return a mutable reference to the element at `index`, or return `None` if the index is out of bounds.",12,[[["self"],["i"]],["option"]]],[11,"uget","","Perform unchecked array indexing.",12,[[["self"],["i"]],["a"]]],[11,"uget_mut","","Perform unchecked array indexing.",12,[[["self"],["i"]],["a"]]],[11,"swap","","Swap elements at indices `index1` and `index2`.",12,[[["self"],["i"],["i"]]]],[11,"uswap","","Swap elements unchecked at indices `index1` and `index2`.",12,[[["self"],["i"],["i"]]]],[11,"index_axis","","Returns a view restricted to `index` along the axis, with the axis removed.",12,[[["self"],["axis"],["usize"]],["arrayview"]]],[11,"index_axis_mut","","Returns a mutable view restricted to `index` along the axis, with the axis removed.",12,[[["self"],["axis"],["usize"]],["arrayviewmut"]]],[11,"index_axis_move","","Collapses the array to `index` along the axis and removes the axis.",12,[[["self"],["axis"],["usize"]],["arraybase"]]],[11,"collapse_axis","","Selects `index` along the axis, collapsing the axis into length one.",12,[[["self"],["axis"],["usize"]]]],[11,"subview","","Along `axis`, select the subview `index` and return a view with that axis removed.",12,[[["self"],["axis"],["ix"]],["arrayview"]]],[11,"subview_mut","","Along `axis`, select the subview `index` and return a read-write view with the axis removed.",12,[[["self"],["axis"],["ix"]],["arrayviewmut"]]],[11,"subview_inplace","","Collapse dimension `axis` into length one, and select the subview of `index` along that axis.",12,[[["self"],["axis"],["ix"]]]],[11,"into_subview","","Along `axis`, select the subview `index` and return `self` with that axis removed.",12,[[["self"],["axis"],["ix"]],["arraybase"]]],[11,"select","","Along `axis`, select arbitrary subviews corresponding to `indices`  and and copy them into a new array.",12,N],[11,"genrows","","Return a producer and iterable that traverses over the generalized rows of the array. For a 2D array these are the regular rows.",12,[[["self"]],["lanes"]]],[11,"genrows_mut","","Return a producer and iterable that traverses over the generalized rows of the array and yields mutable array views.",12,[[["self"]],["lanesmut"]]],[11,"gencolumns","","Return a producer and iterable that traverses over the generalized columns of the array. For a 2D array these are the regular columns.",12,[[["self"]],["lanes"]]],[11,"gencolumns_mut","","Return a producer and iterable that traverses over the generalized columns of the array and yields mutable array views.",12,[[["self"]],["lanesmut"]]],[11,"lanes","","Return a producer and iterable that traverses over all 1D lanes pointing in the direction of `axis`.",12,[[["self"],["axis"]],["lanes"]]],[11,"lanes_mut","","Return a producer and iterable that traverses over all 1D lanes pointing in the direction of `axis`.",12,[[["self"],["axis"]],["lanesmut"]]],[11,"outer_iter","","Return an iterator that traverses over the outermost dimension and yields each subview.",12,[[["self"]],["axisiter"]]],[11,"outer_iter_mut","","Return an iterator that traverses over the outermost dimension and yields each subview.",12,[[["self"]],["axisitermut"]]],[11,"axis_iter","","Return an iterator that traverses over `axis` and yields each subview along it.",12,[[["self"],["axis"]],["axisiter"]]],[11,"axis_iter_mut","","Return an iterator that traverses over `axis` and yields each mutable subview along it.",12,[[["self"],["axis"]],["axisitermut"]]],[11,"axis_chunks_iter","","Return an iterator that traverses over `axis` by chunks of `size`, yielding non-overlapping views along that axis.",12,[[["self"],["axis"],["usize"]],["axischunksiter"]]],[11,"axis_chunks_iter_mut","","Return an iterator that traverses over `axis` by chunks of `size`, yielding non-overlapping read-write views along that axis.",12,[[["self"],["axis"],["usize"]],["axischunksitermut"]]],[11,"exact_chunks","","Return an exact chunks producer (and iterable).",12,[[["self"],["e"]],["exactchunks"]]],[11,"exact_chunks_mut","","Return an exact chunks producer (and iterable).",12,[[["self"],["e"]],["exactchunksmut"]]],[11,"windows","","Return a window producer and iterable.",12,[[["self"],["e"]],["windows"]]],[11,"diag","","Return an view of the diagonal elements of the array.",12,[[["self"]],["arrayview1"]]],[11,"diag_mut","","Return a read-write view over the diagonal elements of the array.",12,[[["self"]],["arrayviewmut1"]]],[11,"into_diag","","Return the diagonal as a one-dimensional array.",12,[[["self"]],["arraybase",["ix1"]]]],[11,"is_standard_layout","","Return `true` if the array data is laid out in contiguous “C order” in memory (where the last index is the most rapidly varying).",12,[[["self"]],["bool"]]],[11,"as_ptr","","Return a pointer to the first element in the array.",12,N],[11,"as_mut_ptr","","Return a mutable pointer to the first element in the array.",12,N],[11,"raw_view","","Return a raw view of the array.",12,[[["self"]],["rawarrayview"]]],[11,"raw_view_mut","","Return a raw mutable view of the array.",12,[[["self"]],["rawarrayviewmut"]]],[11,"as_slice","","Return the array’s data as a slice, if it is contiguous and in standard order. Return `None` otherwise.",12,[[["self"]],["option"]]],[11,"as_slice_mut","","Return the array’s data as a slice, if it is contiguous and in standard order. Return `None` otherwise.",12,[[["self"]],["option"]]],[11,"as_slice_memory_order","","Return the array’s data as a slice if it is contiguous, return `None` otherwise.",12,[[["self"]],["option"]]],[11,"as_slice_memory_order_mut","","Return the array’s data as a slice if it is contiguous, return `None` otherwise.",12,[[["self"]],["option"]]],[11,"into_shape","","Transform the array into `shape`; any shape with the same number of elements is accepted, but the source array or view must be contiguous, otherwise we cannot rearrange the dimension.",12,[[["self"],["e"]],["result",["arraybase","shapeerror"]]]],[11,"reshape","","Note: Reshape is for `ArcArray` only. Use `.into_shape()` for other arrays and array views.",12,[[["self"],["e"]],["arraybase"]]],[11,"into_dyn","","Convert any array or array view to a dynamic dimensional array or array view (respectively).",12,[[["self"]],["arraybase",["ixdyn"]]]],[11,"into_dimensionality","","Convert an array or array view to another with the same type, but different dimensionality type. Errors if the dimensions don't agree.",12,[[["self"]],["result",["arraybase","shapeerror"]]]],[11,"broadcast","","Act like a larger size and/or shape array by broadcasting into a larger shape, if possible.",12,[[["self"],["e"]],["option",["arrayview"]]]],[11,"swap_axes","","Swap axes `ax` and `bx`.",12,[[["self"],["usize"],["usize"]]]],[11,"permuted_axes","","Permute the axes.",12,[[["self"],["t"]],["arraybase"]]],[11,"reversed_axes","","Transpose the array by reversing axes.",12,[[["self"]],["arraybase"]]],[11,"t","","Return a transposed view of the array.",12,[[["self"]],["arrayview"]]],[11,"axes","","Return an iterator over the length and stride of each axis.",12,[[["self"]],["axes"]]],[11,"max_stride_axis","","Return the axis with the greatest stride (by absolute value), preferring axes with len > 1.",12,[[["self"]],["axis"]]],[11,"invert_axis","","Reverse the stride of `axis`.",12,[[["self"],["axis"]]]],[11,"merge_axes","","If possible, merge in the axis `take` to `into`.",12,[[["self"],["axis"],["axis"]],["bool"]]],[11,"insert_axis","","Insert new array axis at `axis` and return the result.",12,[[["self"],["axis"]],["arraybase"]]],[11,"remove_axis","","Remove array axis `axis` and return the result.",12,[[["self"],["axis"]],["arraybase"]]],[11,"assign","","Perform an elementwise assigment to `self` from `rhs`.",12,[[["self"],["arraybase"]]]],[11,"fill","","Perform an elementwise assigment to `self` from element `x`.",12,[[["self"],["a"]]]],[11,"zip_mut_with","","Traverse two arrays in unspecified order, in lock step, calling the closure `f` on each element pair.",12,[[["self"],["arraybase"],["f"]]]],[11,"fold","","Traverse the array elements and apply a fold, returning the resulting value.",12,[[["self"],["b"],["f"]],["b"]]],[11,"map","","Call `f` by reference on each element and create a new array with the new values.",12,[[["self"],["f"]],["array"]]],[11,"map_mut","","Call `f` on a mutable reference of each element and create a new array with the new values.",12,[[["self"],["f"]],["array"]]],[11,"mapv","","Call `f` by value on each element and create a new array with the new values.",12,[[["self"],["f"]],["array"]]],[11,"mapv_into","","Call `f` by value on each element, update the array with the new values and return it.",12,[[["self"],["f"]],["self"]]],[11,"map_inplace","","Modify the array in place by calling `f` by mutable reference on each element.",12,[[["self"],["f"]]]],[11,"mapv_inplace","","Modify the array in place by calling `f` by value on each element. The array is updated with the new values.",12,[[["self"],["f"]]]],[11,"visit","","Visit each element in the array by calling `f` by reference on each element.",12,[[["self"],["f"]]]],[11,"fold_axis","","Fold along an axis.",12,[[["self"],["axis"],["b"],["f"]],["array"]]],[11,"map_axis","","Reduce the values along an axis into just one value, producing a new array with one less dimension.",12,[[["self"],["axis"],["f"]],["array"]]],[11,"map_axis_mut","","Reduce the values along an axis into just one value, producing a new array with one less dimension. 1-dimensional lanes are passed as mutable references to the reducer, allowing for side-effects.",12,[[["self"],["axis"],["f"]],["array"]]],[11,"to_vec","","Return an vector with the elements of the one-dimensional array.",12,[[["self"]],["vec"]]],[11,"row","","Return an array view of row `index`.",12,[[["self"],["ix"]],["arrayview1"]]],[11,"row_mut","","Return a mutable array view of row `index`.",12,[[["self"],["ix"]],["arrayviewmut1"]]],[11,"rows","","Return the number of rows (length of `Axis(0)`) in the two-dimensional array.",12,[[["self"]],["usize"]]],[11,"column","","Return an array view of column `index`.",12,[[["self"],["ix"]],["arrayview1"]]],[11,"column_mut","","Return a mutable array view of column `index`.",12,[[["self"],["ix"]],["arrayviewmut1"]]],[11,"cols","","Return the number of columns (length of `Axis(1)`) in the two-dimensional array.",12,[[["self"]],["usize"]]],[11,"is_square","","Return true if the array is square, false otherwise.",12,[[["self"]],["bool"]]],[11,"insert_axis_inplace","","Insert new array axis of length 1 at `axis`, modifying the shape and strides in-place.",12,[[["self"],["axis"]]]],[11,"index_axis_inplace","","Collapses the array to `index` along the axis and removes the axis, modifying the shape and strides in-place.",12,[[["self"],["axis"],["usize"]]]],[11,"sum","","Return the sum of all elements in the array.",12,[[["self"]],["a"]]],[11,"scalar_sum","","Return the sum of all elements in the array.",12,[[["self"]],["a"]]],[11,"product","","Return the product of all elements in the array.",12,[[["self"]],["a"]]],[11,"sum_axis","","Return sum along `axis`.",12,[[["self"],["axis"]],["array"]]],[11,"mean_axis","","Return mean along `axis`.",12,[[["self"],["axis"]],["array"]]],[11,"var_axis","","Return variance along `axis`.",12,[[["self"],["axis"],["a"]],["array"]]],[11,"std_axis","","Return standard deviation along `axis`.",12,[[["self"],["axis"],["a"]],["array"]]],[11,"all_close","","Return `true` if the arrays' elementwise differences are all within the given absolute tolerance, `false` otherwise.",12,[[["self"],["arraybase"],["a"]],["bool"]]],[0,"linalg","","Linear algebra.",N,N],[5,"general_mat_mul","ndarray::linalg","General matrix-matrix multiplication.",N,[[["a"],["arraybase"],["arraybase"],["a"],["arraybase"]]]],[5,"general_mat_vec_mul","","General matrix-vector multiplication.",N,[[["a"],["arraybase"],["arraybase"],["a"],["arraybase"]]]],[11,"dot","ndarray","Perform dot product or matrix multiplication of arrays `self` and `rhs`.",12,N],[11,"dot","","Perform matrix multiplication of rectangular arrays `self` and `rhs`.",12,N],[11,"scaled_add","","Perform the operation `self += alpha * rhs` efficiently, where `alpha` is a scalar and `rhs` is another array. This operation is also known as `axpy` in BLAS.",12,[[["self"],["a"],["arraybase"]]]],[8,"Dot","ndarray::linalg","Matrix Multiplication",N,N],[16,"Output","","The result of the operation.",13,N],[10,"dot","","",13,N],[6,"Ix0","ndarray","zero-dimensionial",N,N],[6,"Ix1","","one-dimensional",N,N],[6,"Ix2","","two-dimensional",N,N],[6,"Ix3","","three-dimensional",N,N],[6,"Ix4","","four-dimensional",N,N],[6,"Ix5","","five-dimensional",N,N],[6,"Ix6","","six-dimensional",N,N],[6,"IxDyn","","dynamic-dimensional",N,N],[6,"Array0","","zero-dimensional array",N,N],[6,"Array1","","one-dimensional array",N,N],[6,"Array2","","two-dimensional array",N,N],[6,"Array3","","three-dimensional array",N,N],[6,"Array4","","four-dimensional array",N,N],[6,"Array5","","five-dimensional array",N,N],[6,"Array6","","six-dimensional array",N,N],[6,"ArrayD","","dynamic-dimensional array",N,N],[6,"ArrayView0","","zero-dimensional array view",N,N],[6,"ArrayView1","","one-dimensional array view",N,N],[6,"ArrayView2","","two-dimensional array view",N,N],[6,"ArrayView3","","three-dimensional array view",N,N],[6,"ArrayView4","","four-dimensional array view",N,N],[6,"ArrayView5","","five-dimensional array view",N,N],[6,"ArrayView6","","six-dimensional array view",N,N],[6,"ArrayViewD","","dynamic-dimensional array view",N,N],[6,"ArrayViewMut0","","zero-dimensional read-write array view",N,N],[6,"ArrayViewMut1","","one-dimensional read-write array view",N,N],[6,"ArrayViewMut2","","two-dimensional read-write array view",N,N],[6,"ArrayViewMut3","","three-dimensional read-write array view",N,N],[6,"ArrayViewMut4","","four-dimensional read-write array view",N,N],[6,"ArrayViewMut5","","five-dimensional read-write array view",N,N],[6,"ArrayViewMut6","","six-dimensional read-write array view",N,N],[6,"ArrayViewMutD","","dynamic-dimensional read-write array view",N,N],[6,"RcArray1","","one-dimensional shared ownership array",N,N],[6,"RcArray2","","two-dimensional shared ownership array",N,N],[6,"Ix","","Array index type",N,N],[6,"Ixs","","Array index type (signed)",N,N],[6,"RcArray","","An array where the data has shared ownership and is copy on write.",N,N],[6,"ArcArray","","An array where the data has shared ownership and is copy on write.",N,N],[6,"Array","","An array that owns its data uniquely.",N,N],[6,"ArrayView","","A read-only array view.",N,N],[6,"ArrayViewMut","","A read-write array view.",N,N],[6,"RawArrayView","","A read-only array view without a lifetime.",N,N],[6,"RawArrayViewMut","","A mutable array view without a lifetime.",N,N],[8,"Dimension","","Array shape and index trait.",N,N],[18,"NDIM","","For fixed-size dimension representations (e.g. `Ix2`), this should be `Some(ndim)`, and for variable-size dimension representations (e.g. `IxDyn`), this should be `None`.",14,N],[16,"SliceArg","","`SliceArg` is the type which is used to specify slicing for this dimension.",14,N],[16,"Pattern","","Pattern matching friendly form of the dimension value.",14,N],[16,"Smaller","","Next smaller dimension (if applicable)",14,N],[16,"Larger","","Next larger dimension",14,N],[10,"ndim","","Returns the number of dimensions (number of axes).",14,[[["self"]],["usize"]]],[10,"into_pattern","","Convert the dimension into a pattern matching friendly value.",14,N],[11,"size","","Compute the size of the dimension (number of elements)",14,[[["self"]],["usize"]]],[11,"size_checked","","Compute the size while checking for overflow.",14,[[["self"]],["option",["usize"]]]],[11,"as_array_view","","Borrow as a read-only array view.",14,[[["self"]],["arrayview1",["ix"]]]],[11,"as_array_view_mut","","Borrow as a read-write array view.",14,[[["self"]],["arrayviewmut1",["ix"]]]],[10,"zeros","","Creates a dimension of all zeros with the specified ndim.",14,[[["usize"]],["self"]]],[11,"into_dyn","","Convert the dimensional into a dynamic dimensional (IxDyn).",14,[[["self"]],["ixdyn"]]],[10,"__private__","","This trait is private to implement; this method exists to make it impossible to implement outside the crate.",14,[[["self"]],["privatemarker"]]],[8,"IntoDimension","","Argument conversion a dimension.",N,N],[16,"Dim","","",15,N],[10,"into_dimension","","",15,N],[8,"RemoveAxis","","Array shape with a next smaller dimension.",N,N],[10,"remove_axis","","",16,N],[8,"NdIndex","","Tuple or fixed size arrays that can be used to index an array.",N,N],[8,"AsArray","","Argument conversion into an array view",N,N],[8,"LinalgScalar","","Elements that support linear algebra operations.",N,N],[8,"NdFloat","","Floating-point element types `f32` and `f64`.",N,N],[8,"ShapeBuilder","","A trait for `Shape` and `D where D: Dimension` that allows customizing the memory layout (strides) of an array shape.",N,N],[16,"Dim","","",17,N],[16,"Strides","","",17,N],[10,"into_shape","","",17,[[["self"]],["shape"]]],[10,"f","","",17,[[["self"]],["shape"]]],[10,"set_f","","",17,[[["self"],["bool"]],["shape"]]],[10,"strides","","",17,N],[8,"IndexLonger","","Extra indexing methods for array views",N,N],[16,"Output","","The type of the reference to the element that is produced, including its lifetime.",18,N],[10,"index","","Get a reference of a element through the view.",18,N],[10,"get","","Get a reference of a element through the view.",18,[[["self"],["i"]],["option"]]],[10,"uget","","Get a reference of a element through the view without boundary check",18,N],[8,"RawData","","Array representation trait.",N,N],[16,"Elem","","The array element type.",19,N],[10,"__private__","","This trait is private to implement; this method exists to make it impossible to implement outside the crate.",19,[[["self"]],["privatemarker"]]],[8,"RawDataMut","","Array representation trait.",N,N],[8,"RawDataClone","","Array representation trait.",N,N],[8,"Data","","Array representation trait.",N,N],[8,"DataMut","","Array representation trait.",N,N],[8,"DataOwned","","Array representation trait.",N,N],[8,"DataShared","","Array representation trait.",N,N],[8,"DataClone","","Array representation trait.",N,N],[8,"FixedInitializer","","Fixed-size array used for array initialization",N,N],[16,"Elem","","",20,N],[10,"as_init_slice","","",20,N],[10,"len","","",20,[[],["usize"]]],[8,"NdProducer","","A producer of an n-dimensional set of elements; for example an array view, mutable array view or an iterator that yields chunks.",N,N],[16,"Item","","The element produced per iteration.",21,N],[16,"Dim","","Dimension type",21,N],[10,"__private__","","This trait is private to implement; this method exists to make it impossible to implement outside the crate.",21,[[["self"]],["privatemarker"]]],[8,"IntoNdProducer","","Argument conversion into a producer.",N,N],[16,"Item","","The element produced per iteration.",22,N],[16,"Dim","","Dimension type of the producer",22,N],[16,"Output","","",22,N],[10,"into_producer","","Convert the value into an `NdProducer`.",22,N],[8,"ScalarOperand","","Elements that can be used as direct operands in arithmetic with arrays.",N,N],[14,"array","","Create an `Array` with one, two or three dimensions.",N,N],[14,"s","","Slice argument constructor.",N,N],[14,"stack","","Stack arrays along the given axis.",N,N],[14,"azip","","Array zip macro: lock step function application across several arrays and producers.",N,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"into","","",23,[[["self"]],["u"]]],[11,"to_owned","","",23,[[["self"]],["t"]]],[11,"clone_into","","",23,N],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"get_type_id","","",23,[[["self"]],["typeid"]]],[11,"try_into","","",23,[[["self"]],["result"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"into","","",24,[[["self"]],["u"]]],[11,"to_owned","","",24,[[["self"]],["t"]]],[11,"clone_into","","",24,N],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"get_type_id","","",24,[[["self"]],["typeid"]]],[11,"try_into","","",24,[[["self"]],["result"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"to_string","","",9,[[["self"]],["string"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,N],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"to_string","","",12,[[["self"]],["string"]]],[11,"into_iter","","",12,[[["self"]],["i"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,N],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"from","","",25,[[["t"]],["t"]]],[11,"into","","",25,[[["self"]],["u"]]],[11,"to_owned","","",25,[[["self"]],["t"]]],[11,"clone_into","","",25,N],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"get_type_id","","",25,[[["self"]],["typeid"]]],[11,"try_into","","",25,[[["self"]],["result"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"into","","",26,[[["self"]],["u"]]],[11,"to_owned","","",26,[[["self"]],["t"]]],[11,"clone_into","","",26,N],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"get_type_id","","",26,[[["self"]],["typeid"]]],[11,"try_into","","",26,[[["self"]],["result"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"into","","",27,[[["self"]],["u"]]],[11,"to_owned","","",27,[[["self"]],["t"]]],[11,"clone_into","","",27,N],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"get_type_id","","",27,[[["self"]],["typeid"]]],[11,"try_into","","",27,[[["self"]],["result"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"from","","",28,[[["t"]],["t"]]],[11,"into","","",28,[[["self"]],["u"]]],[11,"to_owned","","",28,[[["self"]],["t"]]],[11,"clone_into","","",28,N],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"get_type_id","","",28,[[["self"]],["typeid"]]],[11,"try_into","","",28,[[["self"]],["result"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,N],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"from","","",29,[[["t"]],["t"]]],[11,"into","","",29,[[["self"]],["u"]]],[11,"to_owned","","",29,[[["self"]],["t"]]],[11,"clone_into","","",29,N],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"get_type_id","","",29,[[["self"]],["typeid"]]],[11,"try_into","","",29,[[["self"]],["result"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"to_string","","",4,[[["self"]],["string"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"into_iter","ndarray::iter","",30,[[["self"]],["i"]]],[11,"from","","",30,[[["t"]],["t"]]],[11,"into","","",30,[[["self"]],["u"]]],[11,"to_owned","","",30,[[["self"]],["t"]]],[11,"clone_into","","",30,N],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"get_type_id","","",30,[[["self"]],["typeid"]]],[11,"try_into","","",30,[[["self"]],["result"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"into_iter","","",31,[[["self"]],["i"]]],[11,"from","","",31,[[["t"]],["t"]]],[11,"into","","",31,[[["self"]],["u"]]],[11,"to_owned","","",31,[[["self"]],["t"]]],[11,"clone_into","","",31,N],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"get_type_id","","",31,[[["self"]],["typeid"]]],[11,"try_into","","",31,[[["self"]],["result"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"into_iter","","",32,[[["self"]],["i"]]],[11,"from","","",32,[[["t"]],["t"]]],[11,"into","","",32,[[["self"]],["u"]]],[11,"to_owned","","",32,[[["self"]],["t"]]],[11,"clone_into","","",32,N],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"get_type_id","","",32,[[["self"]],["typeid"]]],[11,"try_into","","",32,[[["self"]],["result"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"into_iter","","",33,[[["self"]],["i"]]],[11,"from","","",33,[[["t"]],["t"]]],[11,"into","","",33,[[["self"]],["u"]]],[11,"to_owned","","",33,[[["self"]],["t"]]],[11,"clone_into","","",33,N],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"get_type_id","","",33,[[["self"]],["typeid"]]],[11,"try_into","","",33,[[["self"]],["result"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"into_iter","","",34,[[["self"]],["i"]]],[11,"from","","",34,[[["t"]],["t"]]],[11,"into","","",34,[[["self"]],["u"]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"get_type_id","","",34,[[["self"]],["typeid"]]],[11,"try_into","","",34,[[["self"]],["result"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"into_iter","","",35,[[["self"]],["i"]]],[11,"from","","",35,[[["t"]],["t"]]],[11,"into","","",35,[[["self"]],["u"]]],[11,"to_owned","","",35,[[["self"]],["t"]]],[11,"clone_into","","",35,N],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"get_type_id","","",35,[[["self"]],["typeid"]]],[11,"try_into","","",35,[[["self"]],["result"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"into_iter","","",36,[[["self"]],["i"]]],[11,"from","","",36,[[["t"]],["t"]]],[11,"into","","",36,[[["self"]],["u"]]],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"get_type_id","","",36,[[["self"]],["typeid"]]],[11,"try_into","","",36,[[["self"]],["result"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"into_iter","","",37,[[["self"]],["i"]]],[11,"from","","",37,[[["t"]],["t"]]],[11,"into","","",37,[[["self"]],["u"]]],[11,"to_owned","","",37,[[["self"]],["t"]]],[11,"clone_into","","",37,N],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"get_type_id","","",37,[[["self"]],["typeid"]]],[11,"try_into","","",37,[[["self"]],["result"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"into_iter","","",38,[[["self"]],["i"]]],[11,"from","","",38,[[["t"]],["t"]]],[11,"into","","",38,[[["self"]],["u"]]],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"get_type_id","","",38,[[["self"]],["typeid"]]],[11,"try_into","","",38,[[["self"]],["result"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"into_iter","","",39,[[["self"]],["i"]]],[11,"from","","",39,[[["t"]],["t"]]],[11,"into","","",39,[[["self"]],["u"]]],[11,"to_owned","","",39,[[["self"]],["t"]]],[11,"clone_into","","",39,N],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"get_type_id","","",39,[[["self"]],["typeid"]]],[11,"try_into","","",39,[[["self"]],["result"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"into_iter","","",40,[[["self"]],["i"]]],[11,"from","","",40,[[["t"]],["t"]]],[11,"into","","",40,[[["self"]],["u"]]],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"get_type_id","","",40,[[["self"]],["typeid"]]],[11,"try_into","","",40,[[["self"]],["result"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"into_iter","","",7,[[["self"]],["i"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"into_iter","","",8,[[["self"]],["i"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"into_iter","","",41,[[["self"]],["i"]]],[11,"from","","",41,[[["t"]],["t"]]],[11,"into","","",41,[[["self"]],["u"]]],[11,"to_owned","","",41,[[["self"]],["t"]]],[11,"clone_into","","",41,N],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"get_type_id","","",41,[[["self"]],["typeid"]]],[11,"try_into","","",41,[[["self"]],["result"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"into_iter","","",42,[[["self"]],["i"]]],[11,"from","","",42,[[["t"]],["t"]]],[11,"into","","",42,[[["self"]],["u"]]],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"get_type_id","","",42,[[["self"]],["typeid"]]],[11,"try_into","","",42,[[["self"]],["result"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"into_iter","","",43,[[["self"]],["i"]]],[11,"from","","",43,[[["t"]],["t"]]],[11,"into","","",43,[[["self"]],["u"]]],[11,"to_owned","","",43,[[["self"]],["t"]]],[11,"clone_into","","",43,N],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"get_type_id","","",43,[[["self"]],["typeid"]]],[11,"try_into","","",43,[[["self"]],["result"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"into_iter","","",44,[[["self"]],["i"]]],[11,"from","","",44,[[["t"]],["t"]]],[11,"into","","",44,[[["self"]],["u"]]],[11,"to_owned","","",44,[[["self"]],["t"]]],[11,"clone_into","","",44,N],[11,"try_from","","",44,[[["u"]],["result"]]],[11,"borrow","","",44,[[["self"]],["t"]]],[11,"get_type_id","","",44,[[["self"]],["typeid"]]],[11,"try_into","","",44,[[["self"]],["result"]]],[11,"borrow_mut","","",44,[[["self"]],["t"]]],[11,"into_iter","","",45,[[["self"]],["i"]]],[11,"from","","",45,[[["t"]],["t"]]],[11,"into","","",45,[[["self"]],["u"]]],[11,"try_from","","",45,[[["u"]],["result"]]],[11,"borrow","","",45,[[["self"]],["t"]]],[11,"get_type_id","","",45,[[["self"]],["typeid"]]],[11,"try_into","","",45,[[["self"]],["result"]]],[11,"borrow_mut","","",45,[[["self"]],["t"]]],[11,"into_iter","","",46,[[["self"]],["i"]]],[11,"from","","",46,[[["t"]],["t"]]],[11,"into","","",46,[[["self"]],["u"]]],[11,"try_from","","",46,[[["u"]],["result"]]],[11,"borrow","","",46,[[["self"]],["t"]]],[11,"get_type_id","","",46,[[["self"]],["typeid"]]],[11,"try_into","","",46,[[["self"]],["result"]]],[11,"borrow_mut","","",46,[[["self"]],["t"]]],[11,"into_iter","","",47,[[["self"]],["i"]]],[11,"from","","",47,[[["t"]],["t"]]],[11,"into","","",47,[[["self"]],["u"]]],[11,"to_owned","","",47,[[["self"]],["t"]]],[11,"clone_into","","",47,N],[11,"try_from","","",47,[[["u"]],["result"]]],[11,"borrow","","",47,[[["self"]],["t"]]],[11,"get_type_id","","",47,[[["self"]],["typeid"]]],[11,"try_into","","",47,[[["self"]],["result"]]],[11,"borrow_mut","","",47,[[["self"]],["t"]]],[11,"_data_slice","ndarray","",27,[[["self"]],["option"]]],[11,"_data_slice","","",27,[[["self"]],["option"]]],[11,"_data_slice","","",26,[[["self"]],["option"]]],[11,"_data_slice","","",25,[[["self"]],["option"]]],[11,"_data_slice","","",28,[[["self"]],["option"]]],[11,"_data_slice","","",28,[[["self"]],["option"]]],[11,"try_ensure_unique","","",27,[[["arraybase"]]]],[11,"try_is_unique","","",27,[[["self"]],["option",["bool"]]]],[11,"try_ensure_unique","","",26,[[["arraybase"]]]],[11,"try_is_unique","","",26,[[["self"]],["option",["bool"]]]],[11,"try_ensure_unique","","",25,[[["arraybase"]]]],[11,"try_is_unique","","",25,[[["self"]],["option",["bool"]]]],[11,"try_ensure_unique","","",28,[[["arraybase"]]]],[11,"try_is_unique","","",28,[[["self"]],["option",["bool"]]]],[11,"clone_with_ptr","","",27,N],[11,"clone_with_ptr","","",27,N],[11,"clone_with_ptr","","",26,N],[11,"clone_with_ptr","","",25,N],[11,"clone_from_with_ptr","","",25,N],[11,"clone_with_ptr","","",28,N],[11,"into_owned","","",26,[[["arraybase"]],["arraybase",["ownedrepr"]]]],[11,"into_owned","","",25,[[["arraybase"]],["arraybase",["ownedrepr"]]]],[11,"into_owned","","",28,[[["arraybase"]],["arraybase",["ownedrepr"]]]],[11,"into_owned","","",28,[[["arraybase"]],["arraybase",["ownedrepr"]]]],[11,"new","","",25,[[["vec"]],["self"]]],[11,"into_shared","","",25,[[["self"]],["ownedrcrepr"]]],[11,"new","","",26,[[["vec"]],["self"]]],[11,"into_shared","","",26,[[["self"]],["ownedrcrepr"]]],[11,"into_dimension","","",48,[[["self"]],["ix1"]]],[11,"into_dimension","","",24,N],[11,"ndim","","",23,[[["self"]],["usize"]]],[11,"slice","","",23,N],[11,"slice_mut","","",23,N],[11,"_fastest_varying_stride_order","","",23,[[["self"]],["self"]]],[11,"into_pattern","","",23,N],[11,"zeros","","",23,[[["usize"]],["self"]]],[11,"next_for","","",23,[[["self"],["self"]],["option"]]],[11,"insert_axis","","",23,N],[11,"try_remove_axis","","",23,N],[11,"ndim","","",23,[[["self"]],["usize"]]],[11,"slice","","",23,N],[11,"slice_mut","","",23,N],[11,"into_pattern","","",23,N],[11,"zeros","","",23,[[["usize"]],["self"]]],[11,"next_for","","",23,[[["self"],["self"]],["option"]]],[11,"equal","","",23,[[["self"],["self"]],["bool"]]],[11,"size","","",23,[[["self"]],["usize"]]],[11,"size_checked","","",23,[[["self"]],["option",["usize"]]]],[11,"default_strides","","",23,[[["self"]],["self"]]],[11,"_fastest_varying_stride_order","","",23,[[["self"]],["self"]]],[11,"min_stride_axis","","",23,[[["self"],["self"]],["axis"]]],[11,"max_stride_axis","","",23,[[["self"],["self"]],["axis"]]],[11,"first_index","","",23,[[["self"]],["option"]]],[11,"stride_offset","","Self is an index, return the stride offset",23,[[["self"],["self"]],["isize"]]],[11,"stride_offset_checked","","Return stride offset for this dimension and index.",23,[[["self"],["self"],["self"]],["option",["isize"]]]],[11,"insert_axis","","",23,N],[11,"try_remove_axis","","",23,N],[11,"ndim","","",23,[[["self"]],["usize"]]],[11,"into_pattern","","",23,N],[11,"slice","","",23,N],[11,"slice_mut","","",23,N],[11,"zeros","","",23,[[["usize"]],["self"]]],[11,"next_for","","",23,[[["self"],["self"]],["option"]]],[11,"equal","","",23,[[["self"],["self"]],["bool"]]],[11,"size","","",23,[[["self"]],["usize"]]],[11,"size_checked","","",23,[[["self"]],["option",["usize"]]]],[11,"last_elem","","",23,[[["self"]],["usize"]]],[11,"set_last_elem","","",23,[[["self"],["usize"]]]],[11,"default_strides","","",23,[[["self"]],["self"]]],[11,"fortran_strides","","",23,[[["self"]],["self"]]],[11,"_fastest_varying_stride_order","","",23,[[["self"]],["self"]]],[11,"min_stride_axis","","",23,[[["self"],["self"]],["axis"]]],[11,"first_index","","",23,[[["self"]],["option"]]],[11,"stride_offset","","Self is an index, return the stride offset",23,[[["self"],["self"]],["isize"]]],[11,"stride_offset_checked","","Return stride offset for this dimension and index.",23,[[["self"],["self"],["self"]],["option",["isize"]]]],[11,"insert_axis","","",23,N],[11,"try_remove_axis","","",23,N],[11,"ndim","","",23,[[["self"]],["usize"]]],[11,"into_pattern","","",23,N],[11,"slice","","",23,N],[11,"slice_mut","","",23,N],[11,"size","","",23,[[["self"]],["usize"]]],[11,"zeros","","",23,[[["usize"]],["self"]]],[11,"next_for","","",23,[[["self"],["self"]],["option"]]],[11,"stride_offset","","Self is an index, return the stride offset",23,[[["self"],["self"]],["isize"]]],[11,"stride_offset_checked","","Return stride offset for this dimension and index.",23,[[["self"],["self"],["self"]],["option",["isize"]]]],[11,"_fastest_varying_stride_order","","",23,[[["self"]],["self"]]],[11,"insert_axis","","",23,N],[11,"try_remove_axis","","",23,N],[11,"ndim","","",23,[[["self"]],["usize"]]],[11,"into_pattern","","",23,N],[11,"slice","","",23,N],[11,"slice_mut","","",23,N],[11,"zeros","","",23,[[["usize"]],["self"]]],[11,"insert_axis","","",23,N],[11,"try_remove_axis","","",23,N],[11,"ndim","","",23,[[["self"]],["usize"]]],[11,"into_pattern","","",23,N],[11,"slice","","",23,N],[11,"slice_mut","","",23,N],[11,"zeros","","",23,[[["usize"]],["self"]]],[11,"insert_axis","","",23,N],[11,"try_remove_axis","","",23,N],[11,"ndim","","",23,[[["self"]],["usize"]]],[11,"into_pattern","","",23,N],[11,"slice","","",23,N],[11,"slice_mut","","",23,N],[11,"zeros","","",23,[[["usize"]],["self"]]],[11,"insert_axis","","",23,N],[11,"try_remove_axis","","",23,N],[11,"ndim","","",49,[[["self"]],["usize"]]],[11,"slice","","",49,N],[11,"slice_mut","","",49,N],[11,"into_pattern","","",49,N],[11,"zeros","","",49,[[["usize"]],["self"]]],[11,"insert_axis","","",49,N],[11,"try_remove_axis","","",49,N],[11,"from_dimension","","",49,[[["d2"]],["option"]]],[11,"index_checked","","",48,[[["self"],["ix1"],["ix1"]],["option",["isize"]]]],[11,"index_unchecked","","",48,[[["self"],["ix1"]],["isize"]]],[11,"index_checked","","",48,[[["self"],["ixdyn"],["ixdyn"]],["option",["isize"]]]],[11,"index_unchecked","","",48,[[["self"],["ixdyn"]],["isize"]]],[11,"index_checked","","",23,[[["self"],["ixdyn"],["ixdyn"]],["option",["isize"]]]],[11,"index_unchecked","","",23,[[["self"],["ixdyn"]],["isize"]]],[11,"index_checked","","",23,[[["self"],["ixdyn"],["ixdyn"]],["option",["isize"]]]],[11,"index_unchecked","","",23,[[["self"],["ixdyn"]],["isize"]]],[11,"index_checked","","",23,[[["self"],["ixdyn"],["ixdyn"]],["option",["isize"]]]],[11,"index_unchecked","","",23,[[["self"],["ixdyn"]],["isize"]]],[11,"index_checked","","",23,[[["self"],["ixdyn"],["ixdyn"]],["option",["isize"]]]],[11,"index_unchecked","","",23,[[["self"],["ixdyn"]],["isize"]]],[11,"index_checked","","",23,[[["self"],["ixdyn"],["ixdyn"]],["option",["isize"]]]],[11,"index_unchecked","","",23,[[["self"],["ixdyn"]],["isize"]]],[11,"index_checked","","",23,[[["self"],["ixdyn"],["ixdyn"]],["option",["isize"]]]],[11,"index_unchecked","","",23,[[["self"],["ixdyn"]],["isize"]]],[11,"index_checked","","",23,[[["self"],["ixdyn"],["ixdyn"]],["option",["isize"]]]],[11,"index_unchecked","","",23,[[["self"],["ixdyn"]],["isize"]]],[11,"remove_axis","","",23,[[["self"],["axis"]],["self"]]],[11,"remove_axis","","",23,[[["self"],["axis"]],["ix0"]]],[11,"remove_axis","","",23,[[["self"],["axis"]],["ix1"]]],[11,"remove_axis","","",23,N],[11,"remove_axis","","",23,N],[11,"remove_axis","","",23,N],[11,"remove_axis","","",23,N],[11,"into_shape","","",10,[[["self"]],["shape"]]],[11,"f","","",10,[[["self"]],["self"]]],[11,"set_f","","",10,[[["self"],["bool"]],["self"]]],[11,"strides","","",10,[[["self"],["d"]],["strideshape"]]],[11,"contiguous_stride","ndarray::iter","",31,N],[11,"contiguous_stride","","",7,[[["self"]],["isize"]]],[11,"contiguous_stride","","",8,[[["self"]],["isize"]]],[11,"contiguous_stride","ndarray","",50,N],[11,"contiguous_stride","","",51,N],[11,"dot","","Compute the dot product of one-dimensional arrays.",12,[[["self"],["arraybase"]],["a"]]],[11,"dot","","Perform the matrix multiplication of the row vector `self` and rectangular matrix `rhs`.",12,[[["self"],["arraybase"]],["array",["ix1"]]]],[11,"dot","","",12,[[["self"],["arraybase"]],["array2"]]],[11,"dot","","",12,[[["self"],["arraybase"]],["array",["ix1"]]]],[11,"index","","Convert a mutable array view to a mutable reference of a element.",51,[[["self"],["i"]],["a"]]],[11,"get","","Convert a mutable array view to a mutable reference of a element, with checked access.",51,[[["self"],["i"]],["option"]]],[11,"uget","","Convert a mutable array view to a mutable reference of a element without boundary check.",51,[[["self"],["i"]],["a"]]],[11,"eq","","",12,[[["self"],["arraybase"]],["bool"]]],[11,"eq","","",0,[[["self"],["self"]],["bool"]]],[11,"eq","","",23,[[["self"],["dim"]],["bool"]]],[11,"ne","","",23,[[["self"],["dim"]],["bool"]]],[11,"eq","","",23,[[["self"],["i"]],["bool"]]],[11,"eq","","",24,[[["self"],["ixdynimpl"]],["bool"]]],[11,"ne","","",24,[[["self"],["ixdynimpl"]],["bool"]]],[11,"eq","","",2,[[["self"],["slice"]],["bool"]]],[11,"ne","","",2,[[["self"],["slice"]],["bool"]]],[11,"eq","","",4,[[["self"],["sliceorindex"]],["bool"]]],[11,"ne","","",4,[[["self"],["sliceorindex"]],["bool"]]],[11,"eq","","",3,[[["self"],["self"]],["bool"]]],[11,"eq","","",9,[[["self"],["self"]],["bool"]]],[11,"into_iter","","",50,N],[11,"into_iter","","",51,N],[11,"into_iter","ndarray::iter","",31,N],[11,"into_iter","","",43,N],[11,"into_iter","","",45,N],[11,"into_iter","","",47,N],[11,"into_iter","","",37,N],[11,"into_iter","","",38,N],[11,"default","ndarray","",12,[[],["self"]]],[11,"default","","",23,[[],["dim"]]],[11,"default","","",24,[[],["ixdynimpl"]]],[11,"clone","","",0,[[["self"]],["self"]]],[11,"clone","","",23,[[["self"]],["dim"]]],[11,"clone","","",24,[[["self"]],["ixdynimpl"]]],[11,"clone","","",1,[[["self"]],["self"]]],[11,"clone","ndarray::iter","",30,[[["self"]],["self"]]],[11,"clone","ndarray","",2,[[["self"]],["slice"]]],[11,"clone","","",4,[[["self"]],["self"]]],[11,"clone","","",6,[[["self"]],["self"]]],[11,"clone","ndarray::iter","",32,[[["self"]],["indicesiter"]]],[11,"clone","","",31,[[["self"]],["indices"]]],[11,"clone","","",43,[[["self"]],["self"]]],[11,"clone","","",44,[[["self"]],["self"]]],[11,"clone","","",47,[[["self"]],["self"]]],[11,"clone","","",37,[[["self"]],["self"]]],[11,"clone","","",33,[[["self"]],["self"]]],[11,"clone","","",35,[[["self"]],["indexediter"]]],[11,"clone","","",39,[[["self"]],["self"]]],[11,"clone","","",7,[[["self"]],["self"]]],[11,"clone","","",41,[[["self"]],["self"]]],[11,"clone","ndarray","",9,[[["self"]],["shapeerror"]]],[11,"clone","","",3,[[["self"]],["errorkind"]]],[11,"clone","","",11,[[["self"]],["zip"]]],[11,"clone","","",5,[[["self"]],["foldwhile"]]],[11,"clone","","",25,[[["self"]],["ownedrepr"]]],[11,"clone","","",26,[[["self"]],["self"]]],[11,"clone","","",27,[[["self"]],["rawviewrepr"]]],[11,"clone","","",28,[[["self"]],["viewrepr"]]],[11,"clone","","",12,[[["self"]],["arraybase"]]],[11,"clone_from","","`Array` implements `.clone_from()` to reuse an array's existing allocation. Semantically equivalent to `*self = other.clone()`, but potentially more efficient.",12,[[["self"],["self"]]]],[11,"clone","","",10,[[["self"]],["shape"]]],[11,"clone","","",29,[[["self"]],["strideshape"]]],[11,"from","","Create a one-dimensional read-only array view of the data in `slice`.",50,[[["slice"]],["self"]]],[11,"from","","Create a read-only array view of the array.",50,[[["arraybase"]],["self"]]],[11,"from","","Create a one-dimensional read-write array view of the data in `slice`.",51,[[["slice"]],["self"]]],[11,"from","","Create a read-write array view of the array.",51,[[["arraybase"]],["self"]]],[11,"from","","",24,N],[11,"from","","",24,[[["vec",["ix"]]],["self"]]],[11,"from","","",52,[[["vec"]],["self"]]],[11,"from","","Converts the `Vec` of arrays to an owned 2-D array.",53,[[["vec"]],["self"]]],[11,"from","","Converts the `Vec` of arrays to an owned 3-D array.",54,[[["vec"]],["self"]]],[11,"from","","",2,[[["range",["isize"]]],["slice"]]],[11,"from","","",2,[[["rangeinclusive",["isize"]]],["slice"]]],[11,"from","","",2,[[["rangefrom",["isize"]]],["slice"]]],[11,"from","","",2,[[["rangeto",["isize"]]],["slice"]]],[11,"from","","",2,[[["rangetoinclusive",["isize"]]],["slice"]]],[11,"from","","",2,[[["range",["usize"]]],["slice"]]],[11,"from","","",2,[[["rangeinclusive",["usize"]]],["slice"]]],[11,"from","","",2,[[["rangefrom",["usize"]]],["slice"]]],[11,"from","","",2,[[["rangeto",["usize"]]],["slice"]]],[11,"from","","",2,[[["rangetoinclusive",["usize"]]],["slice"]]],[11,"from","","",2,[[["range",["i32"]]],["slice"]]],[11,"from","","",2,[[["rangeinclusive",["i32"]]],["slice"]]],[11,"from","","",2,[[["rangefrom",["i32"]]],["slice"]]],[11,"from","","",2,[[["rangeto",["i32"]]],["slice"]]],[11,"from","","",2,[[["rangetoinclusive",["i32"]]],["slice"]]],[11,"from","","",4,[[["range",["isize"]]],["sliceorindex"]]],[11,"from","","",4,[[["rangeinclusive",["isize"]]],["sliceorindex"]]],[11,"from","","",4,[[["rangefrom",["isize"]]],["sliceorindex"]]],[11,"from","","",4,[[["rangeto",["isize"]]],["sliceorindex"]]],[11,"from","","",4,[[["rangetoinclusive",["isize"]]],["sliceorindex"]]],[11,"from","","",4,[[["range",["usize"]]],["sliceorindex"]]],[11,"from","","",4,[[["rangeinclusive",["usize"]]],["sliceorindex"]]],[11,"from","","",4,[[["rangefrom",["usize"]]],["sliceorindex"]]],[11,"from","","",4,[[["rangeto",["usize"]]],["sliceorindex"]]],[11,"from","","",4,[[["rangetoinclusive",["usize"]]],["sliceorindex"]]],[11,"from","","",4,[[["range",["i32"]]],["sliceorindex"]]],[11,"from","","",4,[[["rangeinclusive",["i32"]]],["sliceorindex"]]],[11,"from","","",4,[[["rangefrom",["i32"]]],["sliceorindex"]]],[11,"from","","",4,[[["rangeto",["i32"]]],["sliceorindex"]]],[11,"from","","",4,[[["rangetoinclusive",["i32"]]],["sliceorindex"]]],[11,"from","","",2,[[["rangefull"]],["slice"]]],[11,"from","","",4,[[["rangefull"]],["sliceorindex"]]],[11,"from","","",4,[[["slice"]],["sliceorindex"]]],[11,"from","","",4,[[["isize"]],["sliceorindex"]]],[11,"from","","",4,[[["usize"]],["sliceorindex"]]],[11,"from","","",4,[[["i32"]],["sliceorindex"]]],[11,"from","","Create a `Shape` from `dimension`, using the default memory layout.",10,[[["d"]],["shape"]]],[11,"from","","",29,[[["t"]],["self"]]],[11,"cmp","","",0,[[["self"],["axis"]],["ordering"]]],[11,"next","ndarray::iter","",30,[[["self"]],["option"]]],[11,"size_hint","","",30,N],[11,"next","","",32,[[["self"]],["option"]]],[11,"size_hint","","",32,N],[11,"next","","",44,[[["self"]],["option"]]],[11,"size_hint","","",44,N],[11,"next","","",46,[[["self"]],["option"]]],[11,"size_hint","","",46,N],[11,"next","","",33,[[["self"]],["option"]]],[11,"size_hint","","",33,N],[11,"fold","","",33,[[["self"],["acc"],["g"]],["acc"]]],[11,"next","","",35,[[["self"]],["option"]]],[11,"size_hint","","",35,N],[11,"next","","",34,[[["self"]],["option"]]],[11,"size_hint","","",34,N],[11,"fold","","",34,[[["self"],["acc"],["g"]],["acc"]]],[11,"next","","",36,[[["self"]],["option"]]],[11,"size_hint","","",36,N],[11,"next","","",39,[[["self"]],["option"]]],[11,"size_hint","","",39,N],[11,"next","","",40,[[["self"]],["option"]]],[11,"size_hint","","",40,N],[11,"next","","",7,[[["self"]],["option"]]],[11,"size_hint","","",7,N],[11,"next","","",8,[[["self"]],["option"]]],[11,"size_hint","","",8,N],[11,"next","","",41,[[["self"]],["option"]]],[11,"size_hint","","",41,N],[11,"next","","",42,[[["self"]],["option"]]],[11,"size_hint","","",42,N],[11,"partial_cmp","ndarray","",0,[[["self"],["self"]],["option",["ordering"]]]],[11,"len","ndarray::iter","",33,[[["self"]],["usize"]]],[11,"len","","",35,[[["self"]],["usize"]]],[11,"len","","",34,[[["self"]],["usize"]]],[11,"len","","",36,[[["self"]],["usize"]]],[11,"len","","",39,[[["self"]],["usize"]]],[11,"len","","",40,[[["self"]],["usize"]]],[11,"len","","",7,[[["self"]],["usize"]]],[11,"len","","",8,[[["self"]],["usize"]]],[11,"next_back","","",30,[[["self"]],["option"]]],[11,"next_back","","",33,[[["self"]],["option"]]],[11,"rfold","","",33,[[["self"],["acc"],["g"]],["acc"]]],[11,"next_back","","",34,[[["self"]],["option"]]],[11,"rfold","","",34,[[["self"],["acc"],["g"]],["acc"]]],[11,"next_back","","",7,[[["self"]],["option"]]],[11,"next_back","","",8,[[["self"]],["option"]]],[11,"next_back","","",41,[[["self"]],["option"]]],[11,"next_back","","",42,[[["self"]],["option"]]],[11,"as_ref","ndarray","",6,N],[11,"as_ref","","",6,[[["self"]],["sliceinfo"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"fmt","ndarray::iter","",30,[[["self"],["formatter"]],["result"]]],[11,"fmt","ndarray","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","ndarray::iter","",31,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","ndarray","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"add","","",23,[[["self"],["self"]],["self"]]],[11,"add","","",23,[[["self"],["ix"]],["self"]]],[11,"add","","",12,[[["self"],["arraybase"]],["arraybase"]]],[11,"add","","",12,[[["self"],["arraybase"]],["arraybase"]]],[11,"add","","",12,[[["self"],["b"]],["arraybase"]]],[11,"sub","","",23,[[["self"],["self"]],["self"]]],[11,"sub","","",23,[[["self"],["ix"]],["self"]]],[11,"sub","","",12,[[["self"],["arraybase"]],["arraybase"]]],[11,"sub","","",12,[[["self"],["arraybase"]],["arraybase"]]],[11,"sub","","",12,[[["self"],["b"]],["arraybase"]]],[11,"mul","","",23,[[["self"],["self"]],["self"]]],[11,"mul","","",23,[[["self"],["ix"]],["self"]]],[11,"mul","","",12,[[["self"],["arraybase"]],["arraybase"]]],[11,"mul","","",12,[[["self"],["arraybase"]],["arraybase"]]],[11,"mul","","",12,[[["self"],["b"]],["arraybase"]]],[11,"div","","",12,[[["self"],["arraybase"]],["arraybase"]]],[11,"div","","",12,[[["self"],["arraybase"]],["arraybase"]]],[11,"div","","",12,[[["self"],["b"]],["arraybase"]]],[11,"rem","","",12,[[["self"],["arraybase"]],["arraybase"]]],[11,"rem","","",12,[[["self"],["arraybase"]],["arraybase"]]],[11,"rem","","",12,[[["self"],["b"]],["arraybase"]]],[11,"neg","","Perform an elementwise negation of `self` and return the result.",12,[[["self"]],["self"]]],[11,"add_assign","","",23,[[["self"],["self"]]]],[11,"add_assign","","",23,[[["self"],["self"]]]],[11,"add_assign","","",23,[[["self"],["ix"]]]],[11,"add_assign","","",12,[[["self"],["arraybase"]]]],[11,"add_assign","","",12,[[["self"],["a"]]]],[11,"sub_assign","","",23,[[["self"],["self"]]]],[11,"sub_assign","","",23,[[["self"],["self"]]]],[11,"sub_assign","","",23,[[["self"],["ix"]]]],[11,"sub_assign","","",12,[[["self"],["arraybase"]]]],[11,"sub_assign","","",12,[[["self"],["a"]]]],[11,"mul_assign","","",23,[[["self"],["self"]]]],[11,"mul_assign","","",23,[[["self"],["self"]]]],[11,"mul_assign","","",23,[[["self"],["ix"]]]],[11,"mul_assign","","",12,[[["self"],["arraybase"]]]],[11,"mul_assign","","",12,[[["self"],["a"]]]],[11,"div_assign","","",12,[[["self"],["arraybase"]]]],[11,"div_assign","","",12,[[["self"],["a"]]]],[11,"rem_assign","","",12,[[["self"],["arraybase"]]]],[11,"rem_assign","","",12,[[["self"],["a"]]]],[11,"not","","Perform an elementwise unary not of `self` and return the result.",12,[[["self"]],["self"]]],[11,"bitand","","",12,[[["self"],["arraybase"]],["arraybase"]]],[11,"bitand","","",12,[[["self"],["arraybase"]],["arraybase"]]],[11,"bitand","","",12,[[["self"],["b"]],["arraybase"]]],[11,"bitor","","",12,[[["self"],["arraybase"]],["arraybase"]]],[11,"bitor","","",12,[[["self"],["arraybase"]],["arraybase"]]],[11,"bitor","","",12,[[["self"],["b"]],["arraybase"]]],[11,"bitxor","","",12,[[["self"],["arraybase"]],["arraybase"]]],[11,"bitxor","","",12,[[["self"],["arraybase"]],["arraybase"]]],[11,"bitxor","","",12,[[["self"],["b"]],["arraybase"]]],[11,"shl","","",12,[[["self"],["arraybase"]],["arraybase"]]],[11,"shl","","",12,[[["self"],["arraybase"]],["arraybase"]]],[11,"shl","","",12,[[["self"],["b"]],["arraybase"]]],[11,"shr","","",12,[[["self"],["arraybase"]],["arraybase"]]],[11,"shr","","",12,[[["self"],["arraybase"]],["arraybase"]]],[11,"shr","","",12,[[["self"],["b"]],["arraybase"]]],[11,"bitand_assign","","",12,[[["self"],["arraybase"]]]],[11,"bitand_assign","","",12,[[["self"],["a"]]]],[11,"bitor_assign","","",12,[[["self"],["arraybase"]]]],[11,"bitor_assign","","",12,[[["self"],["a"]]]],[11,"bitxor_assign","","",12,[[["self"],["arraybase"]]]],[11,"bitxor_assign","","",12,[[["self"],["a"]]]],[11,"shl_assign","","",12,[[["self"],["arraybase"]]]],[11,"shl_assign","","",12,[[["self"],["a"]]]],[11,"shr_assign","","",12,[[["self"],["arraybase"]]]],[11,"shr_assign","","",12,[[["self"],["a"]]]],[11,"deref","","",24,N],[11,"deref","","",6,N],[11,"deref_mut","","",24,N],[11,"index","","",12,N],[11,"index","","",23,N],[11,"index","","",23,N],[11,"index","","",23,N],[11,"index","","",23,N],[11,"index","","",23,N],[11,"index","","",23,N],[11,"index","","",23,N],[11,"index","","",23,N],[11,"index","","",24,N],[11,"index_mut","","",12,N],[11,"index_mut","","",23,N],[11,"index_mut","","",23,N],[11,"index_mut","","",23,N],[11,"index_mut","","",23,N],[11,"index_mut","","",23,N],[11,"index_mut","","",23,N],[11,"index_mut","","",23,N],[11,"index_mut","","",23,N],[11,"index_mut","","",24,N],[11,"hash","","",12,[[["self"],["h"]]]],[11,"hash","","",0,N],[11,"hash","","",23,[[["self"],["h"]]]],[11,"hash","","",2,N],[11,"hash","","",4,N],[11,"from_iter","","",12,[[["i"]],["arraybase",["ix1"]]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"description","","",9,[[["self"]],["str"]]],[11,"zero","","",23,[[],["self"]]],[11,"is_zero","","",23,[[["self"]],["bool"]]],[11,"zero","","",23,[[],["self"]]],[11,"is_zero","","",23,[[["self"]],["bool"]]],[11,"zero","","",23,[[],["self"]]],[11,"is_zero","","",23,[[["self"]],["bool"]]],[11,"zero","","",23,[[],["self"]]],[11,"is_zero","","",23,[[["self"]],["bool"]]],[11,"zero","","",23,[[],["self"]]],[11,"is_zero","","",23,[[["self"]],["bool"]]],[11,"zero","","",23,[[],["self"]]],[11,"is_zero","","",23,[[["self"]],["bool"]]],[11,"zero","","",23,[[],["self"]]],[11,"is_zero","","",23,[[["self"]],["bool"]]],[18,"NDIM","","For fixed-size dimension representations (e.g. `Ix2`), this should be `Some(ndim)`, and for variable-size dimension representations (e.g. `IxDyn`), this should be `None`.",14,N],[11,"size","","Compute the size of the dimension (number of elements)",14,[[["self"]],["usize"]]],[11,"size_checked","","Compute the size while checking for overflow.",14,[[["self"]],["option",["usize"]]]],[11,"as_array_view","","Borrow as a read-only array view.",14,[[["self"]],["arrayview1",["ix"]]]],[11,"as_array_view_mut","","Borrow as a read-write array view.",14,[[["self"]],["arrayviewmut1",["ix"]]]],[11,"into_dyn","","Convert the dimensional into a dynamic dimensional (IxDyn).",14,[[["self"]],["ixdyn"]]],[11,"zeros","","Create a new dimension value with `n` axes, all zeros",49,[[["usize"]],["ixdyn"]]],[11,"into_scalar","","Returns the single element in the array without cloning it.",55,[[["self"]],["a"]]],[11,"into_raw_vec","","Return a vector of the elements in the array, in the way they are stored internally.",55,[[["self"]],["vec"]]],[11,"from_shape","","Create a read-only array view borrowing its data from a slice.",50,N],[11,"from_shape_ptr","","Create an `ArrayView<A, D>` from shape information and a raw pointer to the elements.",50,N],[11,"reborrow","","Convert the view into an `ArrayView<'b, A, D>` where `'b` is a lifetime outlived by `'a'`.",50,[[["self"]],["arrayview"]]],[11,"split_at","","Split the array view along `axis` and return one view strictly before the split and one view after the split.",50,N],[11,"into_slice","","Return the array’s data as a slice, if it is contiguous and in standard order. Return `None` otherwise.",50,[[["self"]],["option"]]],[11,"from_shape","","Create a read-write array view borrowing its data from a slice.",51,N],[11,"from_shape_ptr","","Create an `ArrayViewMut<A, D>` from shape information and a raw pointer to the elements.",51,N],[11,"reborrow","","Convert the view into an `ArrayViewMut<'b, A, D>` where `'b` is a lifetime outlived by `'a'`.",51,[[["self"]],["arrayviewmut"]]],[11,"split_at","","Split the array view along `axis` and return one mutable view strictly before the split and one mutable view after the split.",51,N],[11,"into_slice","","Return the array’s data as a slice, if it is contiguous and in standard order. Return `None` otherwise.",51,[[["self"]],["option"]]],[11,"from_shape_ptr","","Create an `RawArrayView<A, D>` from shape information and a raw pointer to the elements.",56,N],[11,"deref_into_view","","Converts to a read-only view of the array.",56,[[["self"]],["arrayview"]]],[11,"split_at","","Split the array view along `axis` and return one array pointer strictly before the split and one array pointer after the split.",56,N],[11,"from_shape_ptr","","Create an `RawArrayViewMut<A, D>` from shape information and a raw pointer to the elements.",57,N],[11,"deref_into_view","","Converts to a read-only view of the array.",57,[[["self"]],["arrayview"]]],[11,"deref_into_view_mut","","Converts to a mutable view of the array.",57,[[["self"]],["arrayviewmut"]]],[11,"split_at","","Split the array view along `axis` and return one array pointer strictly before the split and one array pointer after the split.",57,N]],"paths":[[3,"Axis"],[3,"AxisDescription"],[3,"Slice"],[4,"ErrorKind"],[4,"SliceOrIndex"],[4,"FoldWhile"],[3,"SliceInfo"],[3,"AxisIter"],[3,"AxisIterMut"],[3,"ShapeError"],[3,"Shape"],[3,"Zip"],[3,"ArrayBase"],[8,"Dot"],[8,"Dimension"],[8,"IntoDimension"],[8,"RemoveAxis"],[8,"ShapeBuilder"],[8,"IndexLonger"],[8,"RawData"],[8,"FixedInitializer"],[8,"NdProducer"],[8,"IntoNdProducer"],[3,"Dim"],[3,"IxDynImpl"],[3,"OwnedRepr"],[3,"OwnedArcRepr"],[3,"RawViewRepr"],[3,"ViewRepr"],[3,"StrideShape"],[3,"Axes"],[3,"Indices"],[3,"IndicesIter"],[3,"Iter"],[3,"IterMut"],[3,"IndexedIter"],[3,"IndexedIterMut"],[3,"Lanes"],[3,"LanesMut"],[3,"LanesIter"],[3,"LanesIterMut"],[3,"AxisChunksIter"],[3,"AxisChunksIterMut"],[3,"ExactChunks"],[3,"ExactChunksIter"],[3,"ExactChunksMut"],[3,"ExactChunksIterMut"],[3,"Windows"],[6,"Ix"],[6,"IxDyn"],[6,"ArrayView"],[6,"ArrayViewMut"],[6,"Array1"],[6,"Array2"],[6,"Array3"],[6,"Array"],[6,"RawArrayView"],[6,"RawArrayViewMut"]]};
initSearch(searchIndex);
